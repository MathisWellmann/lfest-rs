[
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Into<f64> for BaseCurrency<I, D>>::into",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 253,
          "column": 5
        },
        "end": {
          "line": 256,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 255,
        "column": 9
      },
      "end": {
        "line": 255,
        "column": 24
      }
    },
    "replacement": "1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 39
      },
      "end": {
        "line": 67,
        "column": 40
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::insert",
      "return_type": "-> crate::Result<Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>, >",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 85,
        "column": 29
      },
      "end": {
        "line": 85,
        "column": 31
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 18
      },
      "end": {
        "line": 67,
        "column": 19
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/load_trades_from_csv.rs",
    "function": {
      "function_name": "load_trades_from_csv",
      "return_type": "-> Vec<Trade<I, D, QuoteCurrency<I, D>>>",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 60,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 54,
        "column": 43
      },
      "end": {
        "line": 54,
        "column": 44
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 233,
        "column": 45
      },
      "end": {
        "line": 233,
        "column": 47
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/market_order.rs",
    "function": {
      "function_name": "MarketOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::into_pending",
      "return_type": "-> MarketOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>",
      "span": {
        "start": {
          "line": 113,
          "column": 5
        },
        "end": {
          "line": 125,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 118,
        "column": 9
      },
      "end": {
        "line": 124,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 23
      },
      "end": {
        "line": 145,
        "column": 25
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Div<Decimal<I, D>> for BaseCurrency<I, D>>::div",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 222,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 224,
        "column": 21
      },
      "end": {
        "line": 224,
        "column": 22
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 148,
        "column": 55
      },
      "end": {
        "line": 148,
        "column": 56
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 37
      },
      "end": {
        "line": 66,
        "column": 38
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 147,
        "column": 31
      },
      "end": {
        "line": 147,
        "column": 33
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Bba<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 53,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 58,
        "column": 9
      },
      "end": {
        "line": 58,
        "column": 118
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 60
      },
      "end": {
        "line": 67,
        "column": 62
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/mock_exchange.rs",
    "function": {
      "function_name": "test_fee_maker",
      "return_type": "-> Fee<i64, DECIMALS, Maker>",
      "span": {
        "start": {
          "line": 10,
          "column": 1
        },
        "end": {
          "line": 13,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 12,
        "column": 5
      },
      "end": {
        "line": 12,
        "column": 55
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_max_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 193,
          "column": 1
        },
        "end": {
          "line": 208,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 203,
        "column": 43
      },
      "end": {
        "line": 203,
        "column": 45
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 49,
        "column": 9
      },
      "end": {
        "line": 58,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "min",
      "return_type": "-> T",
      "span": {
        "start": {
          "line": 16,
          "column": 1
        },
        "end": {
          "line": 27,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 11
      },
      "end": {
        "line": 22,
        "column": 12
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 219,
        "column": 41
      },
      "end": {
        "line": 219,
        "column": 42
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::remove_by_order_id",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 113,
          "column": 5
        },
        "end": {
          "line": 128,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 123,
        "column": 42
      },
      "end": {
        "line": 123,
        "column": 44
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 43
      },
      "end": {
        "line": 130,
        "column": 44
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 397,
        "column": 52
      },
      "end": {
        "line": 397,
        "column": 53
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_short",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 55,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 9
      },
      "end": {
        "line": 57,
        "column": 59
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Bba<I, D>>::timestamp_exchange_ns",
      "return_type": "-> TimestampNs",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 81,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 80,
        "column": 9
      },
      "end": {
        "line": 80,
        "column": 35
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl One for BaseCurrency<I, D>>::is_one",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 149,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 154,
        "column": 9
      },
      "end": {
        "line": 154,
        "column": 29
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 36
      },
      "end": {
        "line": 167,
        "column": 37
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 187,
        "column": 9
      },
      "end": {
        "line": 224,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 25
      },
      "end": {
        "line": 90,
        "column": 26
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::is_in_bucket",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 41
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_min_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 176,
          "column": 1
        },
        "end": {
          "line": 191,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 186,
        "column": 43
      },
      "end": {
        "line": 186,
        "column": 45
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 51
      },
      "end": {
        "line": 67,
        "column": 52
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 214,
        "column": 57
      },
      "end": {
        "line": 214,
        "column": 58
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 73,
        "column": 37
      },
      "end": {
        "line": 73,
        "column": 38
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::update_state",
      "return_type": "-> Result<&Vec<LimitOrderUpdate<I, D, BaseOrQuote, UserOrderIdT>>>",
      "span": {
        "start": {
          "line": 152,
          "column": 5
        },
        "end": {
          "line": 188,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 169,
        "column": 9
      },
      "end": {
        "line": 187,
        "column": 38
      }
    },
    "replacement": "Ok(&vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 224,
        "column": 55
      },
      "end": {
        "line": 224,
        "column": 56
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Mul<Decimal<I, D>> for QuoteCurrency<I, D>>::mul",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 228,
          "column": 5
        },
        "end": {
          "line": 231,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 230,
        "column": 21
      },
      "end": {
        "line": 230,
        "column": 22
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl Into<trade_aggregation::Trade> for Trade<I, D, BaseOrQuote>>::into",
      "return_type": "-> trade_aggregation::Trade",
      "span": {
        "start": {
          "line": 34,
          "column": 5
        },
        "end": {
          "line": 41,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 36,
        "column": 9
      },
      "end": {
        "line": 40,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 162,
        "column": 57
      },
      "end": {
        "line": 162,
        "column": 58
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 136,
        "column": 41
      },
      "end": {
        "line": 136,
        "column": 43
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 44,
        "column": 9
      },
      "end": {
        "line": 44,
        "column": 66
      }
    },
    "replacement": "",
    "genre": "MatchArm"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "decimal_from_f64",
      "return_type": "-> Result<Decimal<I, D>>",
      "span": {
        "start": {
          "line": 57,
          "column": 1
        },
        "end": {
          "line": 67,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 62,
        "column": 28
      },
      "end": {
        "line": 62,
        "column": 29
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 497,
        "column": 33
      },
      "end": {
        "line": 497,
        "column": 34
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_long",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 50,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 21
      },
      "end": {
        "line": 52,
        "column": 22
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 28
      },
      "end": {
        "line": 130,
        "column": 29
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_with_order",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 170,
          "column": 5
        },
        "end": {
          "line": 183,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 177,
        "column": 9
      },
      "end": {
        "line": 182,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "Bba<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 30,
          "column": 5
        },
        "end": {
          "line": 34,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 9
      },
      "end": {
        "line": 33,
        "column": 45
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for QuoteCurrency<I, D>>::price_paid_for_qty",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 135,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 134,
        "column": 44
      },
      "end": {
        "line": 134,
        "column": 45
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "min",
      "return_type": "-> T",
      "span": {
        "start": {
          "line": 16,
          "column": 1
        },
        "end": {
          "line": 27,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 5
      },
      "end": {
        "line": 26,
        "column": 6
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::post_debit",
      "return_type": "",
      "span": {
        "start": {
          "line": 36,
          "column": 5
        },
        "end": {
          "line": 39,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 38,
        "column": 38
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_limit_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 87,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 73,
        "column": 9
      },
      "end": {
        "line": 86,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 35
      },
      "end": {
        "line": 167,
        "column": 36
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 381,
        "column": 38
      },
      "end": {
        "line": 381,
        "column": 39
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 147,
        "column": 31
      },
      "end": {
        "line": 147,
        "column": 33
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/mod.rs",
    "function": {
      "function_name": "UserBalances<I, D, BaseOrQuote>::sum",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 70,
          "column": 5
        },
        "end": {
          "line": 73,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 39
      },
      "end": {
        "line": 72,
        "column": 40
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 206,
        "column": 73
      },
      "end": {
        "line": 206,
        "column": 74
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 9
      },
      "end": {
        "line": 43,
        "column": 54
      }
    },
    "replacement": "",
    "genre": "MatchArm"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 619,
        "column": 34
      },
      "end": {
        "line": 619,
        "column": 35
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 37
      },
      "end": {
        "line": 150,
        "column": 38
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for BaseCurrency<I, D>>::pnl",
      "return_type": "-> BaseCurrency<I, D>",
      "span": {
        "start": {
          "line": 100,
          "column": 5
        },
        "end": {
          "line": 110,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 13
      },
      "end": {
        "line": 109,
        "column": 14
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Into<f64> for QuoteCurrency<I, D>>::into",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 271,
          "column": 5
        },
        "end": {
          "line": 274,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 273,
        "column": 9
      },
      "end": {
        "line": 273,
        "column": 24
      }
    },
    "replacement": "-1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::remove_by_order_id",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 113,
          "column": 5
        },
        "end": {
          "line": 128,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 120,
        "column": 9
      },
      "end": {
        "line": 127,
        "column": 42
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 9
      },
      "end": {
        "line": 67,
        "column": 65
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 224,
        "column": 55
      },
      "end": {
        "line": 224,
        "column": 56
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/leverage.rs",
    "function": {
      "function_name": "Leverage<I, D>::init_margin_req",
      "return_type": "-> Decimal<I, D>",
      "span": {
        "start": {
          "line": 38,
          "column": 5
        },
        "end": {
          "line": 42,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 24
      },
      "end": {
        "line": 41,
        "column": 25
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Zero for BaseCurrency<I, D>>::is_zero",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 132,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 131,
        "column": 9
      },
      "end": {
        "line": 131,
        "column": 25
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Rem for BaseCurrency<I, D>>::rem",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 234,
          "column": 5
        },
        "end": {
          "line": 237,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 236,
        "column": 21
      },
      "end": {
        "line": 236,
        "column": 22
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 399,
        "column": 66
      },
      "end": {
        "line": 399,
        "column": 67
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 134,
        "column": 56
      },
      "end": {
        "line": 134,
        "column": 57
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Num for QuoteCurrency<I, D>>::from_str_radix",
      "return_type": "-> Result<Self, Self::FromStrRadixErr>",
      "span": {
        "start": {
          "line": 182,
          "column": 5
        },
        "end": {
          "line": 184,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 183,
        "column": 9
      },
      "end": {
        "line": 183,
        "column": 64
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::timestamp",
      "return_type": "-> i64",
      "span": {
        "start": {
          "line": 10,
          "column": 5
        },
        "end": {
          "line": 13,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 12,
        "column": 9
      },
      "end": {
        "line": 12,
        "column": 45
      }
    },
    "replacement": "-1",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 68
      },
      "end": {
        "line": 167,
        "column": 69
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for SmartCandle<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 125,
          "column": 5
        },
        "end": {
          "line": 133,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 126,
        "column": 9
      },
      "end": {
        "line": 132,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_maintenance_margin",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 89,
          "column": 5
        },
        "end": {
          "line": 115,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 94,
        "column": 9
      },
      "end": {
        "line": 114,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 43
      },
      "end": {
        "line": 144,
        "column": 44
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_step_size",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 210,
          "column": 1
        },
        "end": {
          "line": 225,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 15
      },
      "end": {
        "line": 218,
        "column": 16
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::signum",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 201,
          "column": 5
        },
        "end": {
          "line": 209,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 203,
        "column": 9
      },
      "end": {
        "line": 208,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::validate_market_update",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 77,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 78,
        "column": 9
      },
      "end": {
        "line": 82,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 136,
        "column": 28
      },
      "end": {
        "line": 136,
        "column": 29
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Trade<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 36,
          "column": 5
        },
        "end": {
          "line": 42,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 9
      },
      "end": {
        "line": 41,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 138,
        "column": 23
      },
      "end": {
        "line": 138,
        "column": 25
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 193,
          "column": 5
        },
        "end": {
          "line": 196,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 195,
        "column": 16
      },
      "end": {
        "line": 195,
        "column": 17
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 24
      },
      "end": {
        "line": 150,
        "column": 25
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 233,
        "column": 45
      },
      "end": {
        "line": 233,
        "column": 47
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_maintenance_margin",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 89,
          "column": 5
        },
        "end": {
          "line": 115,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 100,
        "column": 39
      },
      "end": {
        "line": 100,
        "column": 40
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 211,
          "column": 5
        },
        "end": {
          "line": 214,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 213,
        "column": 16
      },
      "end": {
        "line": 213,
        "column": 17
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Currency<I, D> for BaseCurrency<I, D>>::convert_from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 86,
          "column": 5
        },
        "end": {
          "line": 88,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 87,
        "column": 38
      },
      "end": {
        "line": 87,
        "column": 39
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Mul<Decimal<I, D>> for BaseCurrency<I, D>>::mul",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 210,
          "column": 5
        },
        "end": {
          "line": 213,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 212,
        "column": 21
      },
      "end": {
        "line": 212,
        "column": 22
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::quantity_minus_position",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 233,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 232,
        "column": 18
      },
      "end": {
        "line": 232,
        "column": 19
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 136,
        "column": 28
      },
      "end": {
        "line": 136,
        "column": 29
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 82,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 81,
        "column": 19
      },
      "end": {
        "line": 81,
        "column": 20
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 164,
        "column": 24
      },
      "end": {
        "line": 164,
        "column": 26
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 96,
        "column": 9
      },
      "end": {
        "line": 259,
        "column": 11
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 154,
        "column": 37
      },
      "end": {
        "line": 154,
        "column": 39
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 219,
        "column": 41
      },
      "end": {
        "line": 219,
        "column": 42
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 165,
        "column": 46
      },
      "end": {
        "line": 165,
        "column": 47
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "min",
      "return_type": "-> T",
      "span": {
        "start": {
          "line": 16,
          "column": 1
        },
        "end": {
          "line": 27,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 11
      },
      "end": {
        "line": 22,
        "column": 12
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::remove_by_user_order_id",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 130,
          "column": 5
        },
        "end": {
          "line": 145,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 140,
        "column": 53
      },
      "end": {
        "line": 140,
        "column": 55
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "BaseCurrency<I, D>::quantize_round_to_zero",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 53,
          "column": 5
        },
        "end": {
          "line": 73,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 9
      },
      "end": {
        "line": 72,
        "column": 63
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl One for QuoteCurrency<I, D>>::is_one",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 167,
          "column": 5
        },
        "end": {
          "line": 173,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 172,
        "column": 15
      },
      "end": {
        "line": 172,
        "column": 17
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Div<Decimal<I, D>> for BaseCurrency<I, D>>::div",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 222,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 224,
        "column": 21
      },
      "end": {
        "line": 224,
        "column": 22
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 30
      },
      "end": {
        "line": 167,
        "column": 32
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/leverage.rs",
    "function": {
      "function_name": "Leverage<I, D>::init_margin_req",
      "return_type": "-> Decimal<I, D>",
      "span": {
        "start": {
          "line": 38,
          "column": 5
        },
        "end": {
          "line": 42,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 24
      },
      "end": {
        "line": 41,
        "column": 25
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Into<f64> for BaseCurrency<I, D>>::into",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 253,
          "column": 5
        },
        "end": {
          "line": 256,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 255,
        "column": 9
      },
      "end": {
        "line": 255,
        "column": 24
      }
    },
    "replacement": "-1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 217,
        "column": 46
      },
      "end": {
        "line": 217,
        "column": 47
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_short",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 55,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 21
      },
      "end": {
        "line": 57,
        "column": 22
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 41
      },
      "end": {
        "line": 150,
        "column": 43
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 211,
          "column": 5
        },
        "end": {
          "line": 214,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 213,
        "column": 16
      },
      "end": {
        "line": 213,
        "column": 17
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Num for BaseCurrency<I, D>>::from_str_radix",
      "return_type": "-> Result<Self, Self::FromStrRadixErr>",
      "span": {
        "start": {
          "line": 164,
          "column": 5
        },
        "end": {
          "line": 166,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 165,
        "column": 9
      },
      "end": {
        "line": 165,
        "column": 55
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Mul<Decimal<I, D>> for BaseCurrency<I, D>>::mul",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 210,
          "column": 5
        },
        "end": {
          "line": 213,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 212,
        "column": 21
      },
      "end": {
        "line": 212,
        "column": 22
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::settle_filled_market_order",
      "return_type": "",
      "span": {
        "start": {
          "line": 269,
          "column": 5
        },
        "end": {
          "line": 289,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 279,
        "column": 26
      },
      "end": {
        "line": 279,
        "column": 27
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/timestamp_ns.rs",
    "function": {
      "function_name": "<impl Display for TimestampNs>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 29,
          "column": 5
        },
        "end": {
          "line": 31,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 30,
        "column": 9
      },
      "end": {
        "line": 30,
        "column": 32
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_max_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 193,
          "column": 1
        },
        "end": {
          "line": 208,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 203,
        "column": 18
      },
      "end": {
        "line": 203,
        "column": 19
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Bba<I, D>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 43,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 42,
        "column": 9
      },
      "end": {
        "line": 42,
        "column": 58
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::current_timestamp_ns",
      "return_type": "-> TimestampNs",
      "span": {
        "start": {
          "line": 84,
          "column": 5
        },
        "end": {
          "line": 88,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 87,
        "column": 9
      },
      "end": {
        "line": 87,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 96,
        "column": 9
      },
      "end": {
        "line": 167,
        "column": 53
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_limit_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 87,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 82,
        "column": 29
      },
      "end": {
        "line": 82,
        "column": 30
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Position<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 269,
          "column": 5
        },
        "end": {
          "line": 279,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 270,
        "column": 9
      },
      "end": {
        "line": 278,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/mod.rs",
    "function": {
      "function_name": "UserBalances<I, D, BaseOrQuote>::sum",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 70,
          "column": 5
        },
        "end": {
          "line": 73,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 62
      },
      "end": {
        "line": 72,
        "column": 63
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::abs_sub",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 178,
          "column": 5
        },
        "end": {
          "line": 181,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 180,
        "column": 9
      },
      "end": {
        "line": 180,
        "column": 39
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::values",
      "return_type": "-> impl Iterator<Item =&LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 147,
          "column": 5
        },
        "end": {
          "line": 154,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 153,
        "column": 9
      },
      "end": {
        "line": 153,
        "column": 26
      }
    },
    "replacement": "::std::iter::empty()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::filled_quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 267,
          "column": 5
        },
        "end": {
          "line": 276,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 269,
        "column": 9
      },
      "end": {
        "line": 275,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Into<f64> for QuoteCurrency<I, D>>::into",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 271,
          "column": 5
        },
        "end": {
          "line": 274,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 273,
        "column": 9
      },
      "end": {
        "line": 273,
        "column": 24
      }
    },
    "replacement": "0.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 193,
          "column": 5
        },
        "end": {
          "line": 196,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 195,
        "column": 9
      },
      "end": {
        "line": 195,
        "column": 33
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl One for QuoteCurrency<I, D>>::is_one",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 167,
          "column": 5
        },
        "end": {
          "line": 173,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 172,
        "column": 9
      },
      "end": {
        "line": 172,
        "column": 29
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 240,
        "column": 47
      },
      "end": {
        "line": 240,
        "column": 48
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 45,
        "column": 9
      },
      "end": {
        "line": 45,
        "column": 72
      }
    },
    "replacement": "",
    "genre": "MatchArm"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 497,
        "column": 33
      },
      "end": {
        "line": 497,
        "column": 34
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/mod.rs",
    "function": {
      "function_name": "UserBalances<I, D, BaseOrQuote>::sum",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 70,
          "column": 5
        },
        "end": {
          "line": 73,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 62
      },
      "end": {
        "line": 72,
        "column": 63
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 51,
        "column": 28
      },
      "end": {
        "line": 51,
        "column": 30
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 168,
        "column": 56
      },
      "end": {
        "line": 168,
        "column": 57
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/timestamp_ns.rs",
    "function": {
      "function_name": "<impl AsRef<i64> for TimestampNs>::as_ref",
      "return_type": "-> &i64",
      "span": {
        "start": {
          "line": 35,
          "column": 5
        },
        "end": {
          "line": 38,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 9
      },
      "end": {
        "line": 37,
        "column": 16
      }
    },
    "replacement": "&1",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 180,
        "column": 31
      },
      "end": {
        "line": 180,
        "column": 33
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 45
      },
      "end": {
        "line": 218,
        "column": 47
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 79,
        "column": 9
      },
      "end": {
        "line": 101,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/mock_exchange.rs",
    "function": {
      "function_name": "test_fee_taker",
      "return_type": "-> Fee<i64, DECIMALS, Taker>",
      "span": {
        "start": {
          "line": 15,
          "column": 1
        },
        "end": {
          "line": 18,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 5
      },
      "end": {
        "line": 17,
        "column": 55
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::user_balances",
      "return_type": "-> UserBalances<I, D, BaseOrQuote::PairedCurrency>",
      "span": {
        "start": {
          "line": 681,
          "column": 5
        },
        "end": {
          "line": 699,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 684,
        "column": 9
      },
      "end": {
        "line": 698,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 37
      },
      "end": {
        "line": 150,
        "column": 39
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Currency<I, D> for QuoteCurrency<I, D>>::convert_from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 102,
          "column": 5
        },
        "end": {
          "line": 104,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 103,
        "column": 39
      },
      "end": {
        "line": 103,
        "column": 40
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 179,
        "column": 23
      },
      "end": {
        "line": 179,
        "column": 25
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "assert_user_wallet_balance",
      "return_type": "",
      "span": {
        "start": {
          "line": 42,
          "column": 1
        },
        "end": {
          "line": 55,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 51,
        "column": 5
      },
      "end": {
        "line": 54,
        "column": 52
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for PositionInner<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 42,
          "column": 5
        },
        "end": {
          "line": 48,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 9
      },
      "end": {
        "line": 47,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 217,
        "column": 34
      },
      "end": {
        "line": 217,
        "column": 35
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 187,
        "column": 57
      },
      "end": {
        "line": 187,
        "column": 58
      }
    },
    "replacement": "",
    "genre": "UnaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/mod.rs",
    "function": {
      "function_name": "UserBalances<I, D, BaseOrQuote>::sum",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 70,
          "column": 5
        },
        "end": {
          "line": 73,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 9
      },
      "end": {
        "line": 72,
        "column": 81
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 37
      },
      "end": {
        "line": 145,
        "column": 38
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 153,
        "column": 24
      },
      "end": {
        "line": 153,
        "column": 25
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_short",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 55,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 39
      },
      "end": {
        "line": 57,
        "column": 40
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::len",
      "return_type": "-> usize",
      "span": {
        "start": {
          "line": 54,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 9
      },
      "end": {
        "line": 57,
        "column": 25
      }
    },
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 202,
        "column": 37
      },
      "end": {
        "line": 202,
        "column": 39
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 51,
        "column": 28
      },
      "end": {
        "line": 51,
        "column": 30
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 198,
          "column": 5
        },
        "end": {
          "line": 201,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 9
      },
      "end": {
        "line": 200,
        "column": 33
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 249,
        "column": 41
      },
      "end": {
        "line": 249,
        "column": 43
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::new_with_user_order_id",
      "return_type": "-> Result<Self, OrderError>",
      "span": {
        "start": {
          "line": 116,
          "column": 5
        },
        "end": {
          "line": 146,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 132,
        "column": 24
      },
      "end": {
        "line": 132,
        "column": 26
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 619,
        "column": 34
      },
      "end": {
        "line": 619,
        "column": 35
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 9
      },
      "end": {
        "line": 74,
        "column": 10
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 214,
        "column": 57
      },
      "end": {
        "line": 214,
        "column": 58
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/mock_exchange.rs",
    "function": {
      "function_name": "mock_exchange_linear",
      "return_type": "-> Exchange<i64, DECIMALS, BaseCurrency<i64, DECIMALS>, NoUserOrderId, InMemoryTransactionAccounting<i64, DECIMALS, QuoteCurrency<i64, DECIMALS>>, >",
      "span": {
        "start": {
          "line": 20,
          "column": 1
        },
        "end": {
          "line": 47,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 30,
        "column": 5
      },
      "end": {
        "line": 46,
        "column": 26
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Bba<I, D>>::update_market_state",
      "return_type": "",
      "span": {
        "start": {
          "line": 72,
          "column": 5
        },
        "end": {
          "line": 76,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 74,
        "column": 9
      },
      "end": {
        "line": 75,
        "column": 40
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for BaseCurrency<I, D>>::pnl",
      "return_type": "-> BaseCurrency<I, D>",
      "span": {
        "start": {
          "line": 100,
          "column": 5
        },
        "end": {
          "line": 110,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 109,
        "column": 13
      },
      "end": {
        "line": 109,
        "column": 14
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 142,
        "column": 49
      },
      "end": {
        "line": 142,
        "column": 50
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::get_mut_by_id",
      "return_type": "-> Option<&mut LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 103,
          "column": 5
        },
        "end": {
          "line": 111,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 110,
        "column": 9
      },
      "end": {
        "line": 110,
        "column": 67
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::new_bucket",
      "return_type": "",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 43,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 41
      },
      "end": {
        "line": 41,
        "column": 42
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 47,
          "column": 5
        },
        "end": {
          "line": 54,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 49,
        "column": 9
      },
      "end": {
        "line": 53,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_id.rs",
    "function": {
      "function_name": "<impl Display for OrderId>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 21,
          "column": 5
        },
        "end": {
          "line": 23,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 9
      },
      "end": {
        "line": 22,
        "column": 32
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::liquidate",
      "return_type": "",
      "span": {
        "start": {
          "line": 199,
          "column": 5
        },
        "end": {
          "line": 215,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 9
      },
      "end": {
        "line": 214,
        "column": 73
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 135,
        "column": 9
      },
      "end": {
        "line": 173,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/market_order.rs",
    "function": {
      "function_name": "MarketOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::into_filled",
      "return_type": "-> MarketOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>",
      "span": {
        "start": {
          "line": 135,
          "column": 5
        },
        "end": {
          "line": 154,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 141,
        "column": 9
      },
      "end": {
        "line": 153,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::values",
      "return_type": "-> impl Iterator<Item =&LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 147,
          "column": 5
        },
        "end": {
          "line": 154,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 153,
        "column": 9
      },
      "end": {
        "line": 153,
        "column": 26
      }
    },
    "replacement": "::std::iter::once(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 98,
        "column": 23
      },
      "end": {
        "line": 98,
        "column": 24
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::append_limit_order",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 412,
          "column": 5
        },
        "end": {
          "line": 470,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 447,
        "column": 30
      },
      "end": {
        "line": 447,
        "column": 31
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::remove_by_user_order_id",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 130,
          "column": 5
        },
        "end": {
          "line": 145,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 137,
        "column": 9
      },
      "end": {
        "line": 144,
        "column": 42
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::new_bucket",
      "return_type": "",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 43,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 36
      },
      "end": {
        "line": 41,
        "column": 37
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 26
      },
      "end": {
        "line": 144,
        "column": 27
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "Bba<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 30,
          "column": 5
        },
        "end": {
          "line": 34,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 31
      },
      "end": {
        "line": 33,
        "column": 32
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 638,
        "column": 37
      },
      "end": {
        "line": 638,
        "column": 38
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::update_state",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 53,
          "column": 5
        },
        "end": {
          "line": 76,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 69,
        "column": 9
      },
      "end": {
        "line": 75,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/in_memory_accounting.rs",
    "function": {
      "function_name": "<impl TransactionAccounting<I, D, BaseOrQuote> for InMemoryTransactionAccounting<I, D, BaseOrQuote>>::create_margin_transfer",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 69,
          "column": 5
        },
        "end": {
          "line": 93,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 73,
        "column": 9
      },
      "end": {
        "line": 92,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 9
      },
      "end": {
        "line": 264,
        "column": 13
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::timestamp_exchange_ns",
      "return_type": "-> TimestampNs",
      "span": {
        "start": {
          "line": 109,
          "column": 5
        },
        "end": {
          "line": 112,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 111,
        "column": 9
      },
      "end": {
        "line": 111,
        "column": 35
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 23
      },
      "end": {
        "line": 145,
        "column": 25
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/fee.rs",
    "function": {
      "function_name": "<impl From<Decimal<I, D>> for Fee<I, D, MakerTaker>>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 17,
          "column": 5
        },
        "end": {
          "line": 22,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 18,
        "column": 9
      },
      "end": {
        "line": 21,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Into<f64> for BaseCurrency<I, D>>::into",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 253,
          "column": 5
        },
        "end": {
          "line": 256,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 255,
        "column": 9
      },
      "end": {
        "line": 255,
        "column": 24
      }
    },
    "replacement": "0.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_id.rs",
    "function": {
      "function_name": "<impl From<u64> for OrderId>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 8,
          "column": 5
        },
        "end": {
          "line": 10,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 9,
        "column": 9
      },
      "end": {
        "line": 9,
        "column": 20
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Mul<Decimal<I, D>> for BaseCurrency<I, D>>::mul",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 210,
          "column": 5
        },
        "end": {
          "line": 213,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 212,
        "column": 9
      },
      "end": {
        "line": 212,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 180,
        "column": 31
      },
      "end": {
        "line": 180,
        "column": 33
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::size",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 20,
          "column": 5
        },
        "end": {
          "line": 26,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 9
      },
      "end": {
        "line": 25,
        "column": 10
      }
    },
    "replacement": "1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Div<Decimal<I, D>> for QuoteCurrency<I, D>>::div",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 240,
          "column": 5
        },
        "end": {
          "line": 243,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 242,
        "column": 21
      },
      "end": {
        "line": 242,
        "column": 22
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::post_credit",
      "return_type": "",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 44,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 9
      },
      "end": {
        "line": 43,
        "column": 39
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 240,
        "column": 47
      },
      "end": {
        "line": 240,
        "column": 48
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 82,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 81,
        "column": 31
      },
      "end": {
        "line": 81,
        "column": 32
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 159,
        "column": 23
      },
      "end": {
        "line": 159,
        "column": 25
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 39
      },
      "end": {
        "line": 67,
        "column": 40
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Bba<I, D>>::validate_market_update",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 61,
          "column": 5
        },
        "end": {
          "line": 70,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 62,
        "column": 9
      },
      "end": {
        "line": 69,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_market_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 40,
          "column": 5
        },
        "end": {
          "line": 64,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 9
      },
      "end": {
        "line": 63,
        "column": 10
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for PriceFilter<I, D>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 59,
          "column": 5
        },
        "end": {
          "line": 77,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 60,
        "column": 9
      },
      "end": {
        "line": 76,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 164,
        "column": 24
      },
      "end": {
        "line": 164,
        "column": 26
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_max_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 193,
          "column": 1
        },
        "end": {
          "line": 208,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 203,
        "column": 30
      },
      "end": {
        "line": 203,
        "column": 32
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 37
      },
      "end": {
        "line": 196,
        "column": 38
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 216,
          "column": 5
        },
        "end": {
          "line": 219,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 218,
        "column": 33
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 9
      },
      "end": {
        "line": 48,
        "column": 48
      }
    },
    "replacement": "",
    "genre": "MatchArm"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::settle_filled_market_order",
      "return_type": "",
      "span": {
        "start": {
          "line": 269,
          "column": 5
        },
        "end": {
          "line": 289,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 273,
        "column": 9
      },
      "end": {
        "line": 288,
        "column": 11
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 193,
        "column": 49
      },
      "end": {
        "line": 193,
        "column": 50
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 153,
        "column": 37
      },
      "end": {
        "line": 153,
        "column": 38
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::total_quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 278,
          "column": 5
        },
        "end": {
          "line": 292,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 285,
        "column": 42
      },
      "end": {
        "line": 285,
        "column": 43
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::net_balance",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 46,
          "column": 5
        },
        "end": {
          "line": 49,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 28
      },
      "end": {
        "line": 48,
        "column": 29
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_long",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 50,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 39
      },
      "end": {
        "line": 52,
        "column": 40
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 142,
        "column": 49
      },
      "end": {
        "line": 142,
        "column": 50
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 173,
        "column": 35
      },
      "end": {
        "line": 173,
        "column": 36
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 28
      },
      "end": {
        "line": 130,
        "column": 29
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::update_state",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 53,
          "column": 5
        },
        "end": {
          "line": 76,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 73,
        "column": 19
      },
      "end": {
        "line": 73,
        "column": 21
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/market_order.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for MarketOrder<I, D, BaseOrQuote, UserOrderIdT, State>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 50,
          "column": 5
        },
        "end": {
          "line": 56,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 51,
        "column": 9
      },
      "end": {
        "line": 55,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::timestamp_exchange_ns",
      "return_type": "-> TimestampNs",
      "span": {
        "start": {
          "line": 90,
          "column": 5
        },
        "end": {
          "line": 93,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 92,
        "column": 9
      },
      "end": {
        "line": 92,
        "column": 35
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 478,
        "column": 9
      },
      "end": {
        "line": 541,
        "column": 26
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "Bba<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 30,
          "column": 5
        },
        "end": {
          "line": 34,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 19
      },
      "end": {
        "line": 33,
        "column": 20
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 68
      },
      "end": {
        "line": 167,
        "column": 69
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::timestamp",
      "return_type": "-> i64",
      "span": {
        "start": {
          "line": 10,
          "column": 5
        },
        "end": {
          "line": 13,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 12,
        "column": 9
      },
      "end": {
        "line": 12,
        "column": 45
      }
    },
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 47,
        "column": 9
      },
      "end": {
        "line": 47,
        "column": 58
      }
    },
    "replacement": "",
    "genre": "MatchArm"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>::total_quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 309,
          "column": 5
        },
        "end": {
          "line": 317,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 311,
        "column": 9
      },
      "end": {
        "line": 316,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::append_limit_order",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 412,
          "column": 5
        },
        "end": {
          "line": 470,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 442,
        "column": 34
      },
      "end": {
        "line": 442,
        "column": 35
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::is_in_bucket",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 53
      },
      "end": {
        "line": 33,
        "column": 54
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::is_in_bucket",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 29,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 41
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 134,
        "column": 56
      },
      "end": {
        "line": 134,
        "column": 57
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for QuoteCurrency<I, D>>::pnl",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 116,
          "column": 5
        },
        "end": {
          "line": 127,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 122,
        "column": 9
      },
      "end": {
        "line": 126,
        "column": 65
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_min_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 176,
          "column": 1
        },
        "end": {
          "line": 191,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 186,
        "column": 18
      },
      "end": {
        "line": 186,
        "column": 19
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Bba<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 53,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 58,
        "column": 9
      },
      "end": {
        "line": 58,
        "column": 118
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 155,
        "column": 9
      },
      "end": {
        "line": 176,
        "column": 10
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::unrealized_pnl",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 109,
          "column": 5
        },
        "end": {
          "line": 117,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 116,
        "column": 9
      },
      "end": {
        "line": 116,
        "column": 98
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Zero for BaseCurrency<I, D>>::is_zero",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 132,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 131,
        "column": 9
      },
      "end": {
        "line": 131,
        "column": 25
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/timestamp_ns.rs",
    "function": {
      "function_name": "<impl From<TimestampNs> for i64>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 22,
          "column": 5
        },
        "end": {
          "line": 25,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 24,
        "column": 9
      },
      "end": {
        "line": 24,
        "column": 14
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 43
      },
      "end": {
        "line": 130,
        "column": 44
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 26
      },
      "end": {
        "line": 145,
        "column": 28
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 400,
        "column": 27
      },
      "end": {
        "line": 400,
        "column": 29
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::validate_market_update",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 85,
          "column": 5
        },
        "end": {
          "line": 101,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 86,
        "column": 9
      },
      "end": {
        "line": 100,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 73,
        "column": 37
      },
      "end": {
        "line": 73,
        "column": 38
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Currency<I, D> for BaseCurrency<I, D>>::convert_from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 86,
          "column": 5
        },
        "end": {
          "line": 88,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 87,
        "column": 38
      },
      "end": {
        "line": 87,
        "column": 39
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 202,
        "column": 29
      },
      "end": {
        "line": 202,
        "column": 30
      }
    },
    "replacement": "",
    "genre": "UnaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_max_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 193,
          "column": 1
        },
        "end": {
          "line": 208,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 202,
        "column": 5
      },
      "end": {
        "line": 207,
        "column": 11
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 219,
        "column": 35
      },
      "end": {
        "line": 219,
        "column": 36
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 198,
          "column": 5
        },
        "end": {
          "line": 201,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 9
      },
      "end": {
        "line": 200,
        "column": 33
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "max",
      "return_type": "-> T",
      "span": {
        "start": {
          "line": 29,
          "column": 1
        },
        "end": {
          "line": 40,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 35,
        "column": 11
      },
      "end": {
        "line": 35,
        "column": 12
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::unrealized_pnl",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 34,
          "column": 5
        },
        "end": {
          "line": 45,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 40,
        "column": 9
      },
      "end": {
        "line": 44,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Rem for QuoteCurrency<I, D>>::rem",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 252,
          "column": 5
        },
        "end": {
          "line": 255,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 254,
        "column": 9
      },
      "end": {
        "line": 254,
        "column": 32
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "decimal_from_f64",
      "return_type": "-> Result<Decimal<I, D>>",
      "span": {
        "start": {
          "line": 57,
          "column": 1
        },
        "end": {
          "line": 67,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 62,
        "column": 28
      },
      "end": {
        "line": 62,
        "column": 29
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 211,
          "column": 5
        },
        "end": {
          "line": 214,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 213,
        "column": 9
      },
      "end": {
        "line": 213,
        "column": 33
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_bid_ask_spread",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 162,
          "column": 1
        },
        "end": {
          "line": 174,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 12
      },
      "end": {
        "line": 170,
        "column": 14
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 217,
        "column": 36
      },
      "end": {
        "line": 217,
        "column": 38
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl One for BaseCurrency<I, D>>::one",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 139,
          "column": 5
        },
        "end": {
          "line": 142,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 141,
        "column": 9
      },
      "end": {
        "line": 141,
        "column": 29
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "<impl std::fmt::Debug for Transaction<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 29,
          "column": 5
        },
        "end": {
          "line": 37,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 30,
        "column": 9
      },
      "end": {
        "line": 36,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::post_credit",
      "return_type": "",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 44,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 29
      },
      "end": {
        "line": 43,
        "column": 31
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Zero for QuoteCurrency<I, D>>::is_zero",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 147,
          "column": 5
        },
        "end": {
          "line": 150,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 149,
        "column": 9
      },
      "end": {
        "line": 149,
        "column": 25
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Zero for QuoteCurrency<I, D>>::is_zero",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 147,
          "column": 5
        },
        "end": {
          "line": 150,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 149,
        "column": 9
      },
      "end": {
        "line": 149,
        "column": 25
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::update_market_state",
      "return_type": "",
      "span": {
        "start": {
          "line": 189,
          "column": 5
        },
        "end": {
          "line": 193,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 191,
        "column": 9
      },
      "end": {
        "line": 192,
        "column": 44
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 41
      },
      "end": {
        "line": 167,
        "column": 42
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::append_limit_order",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 412,
          "column": 5
        },
        "end": {
          "line": 470,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 447,
        "column": 30
      },
      "end": {
        "line": 447,
        "column": 31
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::remove_by_order_id",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 113,
          "column": 5
        },
        "end": {
          "line": 128,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 120,
        "column": 9
      },
      "end": {
        "line": 127,
        "column": 42
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 49,
        "column": 12
      },
      "end": {
        "line": 49,
        "column": 13
      }
    },
    "replacement": "",
    "genre": "UnaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for QuoteCurrency<I, D>>::pnl",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 116,
          "column": 5
        },
        "end": {
          "line": 127,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 126,
        "column": 13
      },
      "end": {
        "line": 126,
        "column": 14
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_long",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 50,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 39
      },
      "end": {
        "line": 52,
        "column": 40
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::set_best_bid_and_ask",
      "return_type": "",
      "span": {
        "start": {
          "line": 190,
          "column": 5
        },
        "end": {
          "line": 196,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 193,
        "column": 9
      },
      "end": {
        "line": 195,
        "column": 40
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 219,
        "column": 68
      },
      "end": {
        "line": 219,
        "column": 69
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 194,
        "column": 42
      },
      "end": {
        "line": 194,
        "column": 43
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::update",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 60,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 56,
        "column": 65
      },
      "end": {
        "line": 56,
        "column": 66
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/market_order.rs",
    "function": {
      "function_name": "MarketOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::new_with_user_order_id",
      "return_type": "-> Result<Self, OrderError>",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 111,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 101,
        "column": 21
      },
      "end": {
        "line": 101,
        "column": 23
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 37
      },
      "end": {
        "line": 145,
        "column": 38
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/timestamp_ns.rs",
    "function": {
      "function_name": "<impl AsRef<i64> for TimestampNs>::as_ref",
      "return_type": "-> &i64",
      "span": {
        "start": {
          "line": 35,
          "column": 5
        },
        "end": {
          "line": 38,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 9
      },
      "end": {
        "line": 37,
        "column": 16
      }
    },
    "replacement": "&-1",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::get_by_id",
      "return_type": "-> Option<&LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 93,
          "column": 5
        },
        "end": {
          "line": 101,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 100,
        "column": 9
      },
      "end": {
        "line": 100,
        "column": 63
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for BaseCurrency<I, D>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 244,
          "column": 5
        },
        "end": {
          "line": 246,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 245,
        "column": 9
      },
      "end": {
        "line": 245,
        "column": 37
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 31,
          "column": 5
        },
        "end": {
          "line": 37,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 32,
        "column": 9
      },
      "end": {
        "line": 36,
        "column": 15
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::get_mut_by_id",
      "return_type": "-> Option<&mut LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 103,
          "column": 5
        },
        "end": {
          "line": 111,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 110,
        "column": 55
      },
      "end": {
        "line": 110,
        "column": 57
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/mod.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for UserBalances<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 56,
          "column": 5
        },
        "end": {
          "line": 62,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 9
      },
      "end": {
        "line": 61,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::append_limit_order",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 412,
          "column": 5
        },
        "end": {
          "line": 470,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 442,
        "column": 34
      },
      "end": {
        "line": 442,
        "column": 35
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_bid_ask_spread",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 162,
          "column": 1
        },
        "end": {
          "line": 174,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 170,
        "column": 5
      },
      "end": {
        "line": 173,
        "column": 11
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/load_trades_from_csv.rs",
    "function": {
      "function_name": "load_trades_from_csv",
      "return_type": "-> Vec<Trade<I, D, QuoteCurrency<I, D>>>",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 60,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 21,
        "column": 5
      },
      "end": {
        "line": 59,
        "column": 8
      }
    },
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_status.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Filled<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 148,
          "column": 5
        },
        "end": {
          "line": 154,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 149,
        "column": 9
      },
      "end": {
        "line": 153,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::new_with_user_order_id",
      "return_type": "-> Result<Self, OrderError>",
      "span": {
        "start": {
          "line": 116,
          "column": 5
        },
        "end": {
          "line": 146,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 135,
        "column": 21
      },
      "end": {
        "line": 135,
        "column": 23
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 149,
        "column": 28
      },
      "end": {
        "line": 149,
        "column": 29
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_maintenance_margin",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 89,
          "column": 5
        },
        "end": {
          "line": 115,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 100,
        "column": 39
      },
      "end": {
        "line": 100,
        "column": 40
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::values_mut",
      "return_type": "-> impl Iterator<Item =&mut LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 156,
          "column": 5
        },
        "end": {
          "line": 162,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 161,
        "column": 9
      },
      "end": {
        "line": 161,
        "column": 30
      }
    },
    "replacement": "::std::iter::once(Box::leak(Box::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/load_trades_from_csv.rs",
    "function": {
      "function_name": "load_trades_from_csv",
      "return_type": "-> Vec<Trade<I, D, QuoteCurrency<I, D>>>",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 60,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 54,
        "column": 43
      },
      "end": {
        "line": 54,
        "column": 44
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 98,
        "column": 34
      },
      "end": {
        "line": 98,
        "column": 35
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 24
      },
      "end": {
        "line": 150,
        "column": 25
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::settle_filled_market_order",
      "return_type": "",
      "span": {
        "start": {
          "line": 269,
          "column": 5
        },
        "end": {
          "line": 289,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 279,
        "column": 26
      },
      "end": {
        "line": 279,
        "column": 27
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 37
      },
      "end": {
        "line": 196,
        "column": 38
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 206,
        "column": 73
      },
      "end": {
        "line": 206,
        "column": 74
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 179,
        "column": 23
      },
      "end": {
        "line": 179,
        "column": 25
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Rem for BaseCurrency<I, D>>::rem",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 234,
          "column": 5
        },
        "end": {
          "line": 237,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 236,
        "column": 9
      },
      "end": {
        "line": 236,
        "column": 29
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl One for QuoteCurrency<I, D>>::one",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 160,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 159,
        "column": 9
      },
      "end": {
        "line": 159,
        "column": 69
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_max_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 193,
          "column": 1
        },
        "end": {
          "line": 208,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 203,
        "column": 18
      },
      "end": {
        "line": 203,
        "column": 19
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::remove_by_user_order_id",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 130,
          "column": 5
        },
        "end": {
          "line": 145,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 137,
        "column": 9
      },
      "end": {
        "line": 144,
        "column": 42
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_status.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Pending<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 48,
          "column": 5
        },
        "end": {
          "line": 54,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 49,
        "column": 9
      },
      "end": {
        "line": 53,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::account",
      "return_type": "-> Account<I, D, BaseOrQuote, UserOrderIdT>",
      "span": {
        "start": {
          "line": 136,
          "column": 5
        },
        "end": {
          "line": 143,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 138,
        "column": 9
      },
      "end": {
        "line": 142,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::total_cost",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 103,
          "column": 5
        },
        "end": {
          "line": 107,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 106,
        "column": 9
      },
      "end": {
        "line": 106,
        "column": 83
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::submit_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 298,
          "column": 5
        },
        "end": {
          "line": 362,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 340,
        "column": 46
      },
      "end": {
        "line": 340,
        "column": 48
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/mock_exchange.rs",
    "function": {
      "function_name": "mock_exchange_linear_with_account_tracker",
      "return_type": "-> Exchange<i64, DECIMALS, BaseCurrency<i64, DECIMALS>, NoUserOrderId, InMemoryTransactionAccounting<i64, DECIMALS, QuoteCurrency<i64, DECIMALS>>, >",
      "span": {
        "start": {
          "line": 49,
          "column": 1
        },
        "end": {
          "line": 78,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 61,
        "column": 5
      },
      "end": {
        "line": 77,
        "column": 26
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 230,
        "column": 29
      },
      "end": {
        "line": 230,
        "column": 30
      }
    },
    "replacement": "",
    "genre": "UnaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::insert",
      "return_type": "-> crate::Result<Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>, >",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 78,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 17
      }
    },
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 125,
        "column": 24
      },
      "end": {
        "line": 125,
        "column": 26
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::price",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 15,
          "column": 5
        },
        "end": {
          "line": 18,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 9
      },
      "end": {
        "line": 17,
        "column": 26
      }
    },
    "replacement": "0.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 216,
          "column": 5
        },
        "end": {
          "line": 219,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 9
      },
      "end": {
        "line": 218,
        "column": 33
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 149,
        "column": 28
      },
      "end": {
        "line": 149,
        "column": 29
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_short",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 55,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 39
      },
      "end": {
        "line": 57,
        "column": 40
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "max",
      "return_type": "-> T",
      "span": {
        "start": {
          "line": 29,
          "column": 1
        },
        "end": {
          "line": 40,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 35,
        "column": 5
      },
      "end": {
        "line": 39,
        "column": 6
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::update",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 60,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 56,
        "column": 65
      },
      "end": {
        "line": 56,
        "column": 66
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::quantity_minus_position",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 233,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 232,
        "column": 9
      },
      "end": {
        "line": 232,
        "column": 45
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 157,
        "column": 29
      },
      "end": {
        "line": 157,
        "column": 31
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 82,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 81,
        "column": 19
      },
      "end": {
        "line": 81,
        "column": 20
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/mock_exchange.rs",
    "function": {
      "function_name": "<impl TransactionAccounting<I, D, BaseOrQuote> for MockTransactionAccounting>::margin_balance_of",
      "return_type": "-> Result<BaseOrQuote>",
      "span": {
        "start": {
          "line": 130,
          "column": 5
        },
        "end": {
          "line": 132,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 131,
        "column": 9
      },
      "end": {
        "line": 131,
        "column": 32
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 35
      },
      "end": {
        "line": 167,
        "column": 36
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_step_size",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 210,
          "column": 1
        },
        "end": {
          "line": 225,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 28
      },
      "end": {
        "line": 218,
        "column": 30
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 29
      },
      "end": {
        "line": 67,
        "column": 30
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::set_remaining_quantity",
      "return_type": "",
      "span": {
        "start": {
          "line": 175,
          "column": 5
        },
        "end": {
          "line": 180,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 178,
        "column": 9
      },
      "end": {
        "line": 179,
        "column": 43
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for QuoteCurrency<I, D>>::pnl",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 116,
          "column": 5
        },
        "end": {
          "line": 127,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 126,
        "column": 13
      },
      "end": {
        "line": 126,
        "column": 14
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 194,
        "column": 42
      },
      "end": {
        "line": 194,
        "column": 43
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::next_order_id",
      "return_type": "-> OrderId",
      "span": {
        "start": {
          "line": 291,
          "column": 5
        },
        "end": {
          "line": 296,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 293,
        "column": 9
      },
      "end": {
        "line": 295,
        "column": 12
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::len",
      "return_type": "-> usize",
      "span": {
        "start": {
          "line": 54,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 9
      },
      "end": {
        "line": 57,
        "column": 25
      }
    },
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Rem for BaseCurrency<I, D>>::rem",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 234,
          "column": 5
        },
        "end": {
          "line": 237,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 236,
        "column": 21
      },
      "end": {
        "line": 236,
        "column": 22
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::size",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 20,
          "column": 5
        },
        "end": {
          "line": 26,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 9
      },
      "end": {
        "line": 25,
        "column": 10
      }
    },
    "replacement": "-1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 68,
        "column": 9
      },
      "end": {
        "line": 82,
        "column": 10
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 399,
        "column": 66
      },
      "end": {
        "line": 399,
        "column": 67
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 381,
        "column": 38
      },
      "end": {
        "line": 381,
        "column": 39
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/side.rs",
    "function": {
      "function_name": "Side::inverted",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 13,
          "column": 5
        },
        "end": {
          "line": 19,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 15,
        "column": 9
      },
      "end": {
        "line": 18,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 165,
        "column": 46
      },
      "end": {
        "line": 165,
        "column": 47
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::new_with_user_order_id",
      "return_type": "-> Result<Self, OrderError>",
      "span": {
        "start": {
          "line": 116,
          "column": 5
        },
        "end": {
          "line": 146,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 132,
        "column": 9
      },
      "end": {
        "line": 145,
        "column": 11
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_limit_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 87,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 82,
        "column": 56
      },
      "end": {
        "line": 82,
        "column": 57
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::post_credit",
      "return_type": "",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 44,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 29
      },
      "end": {
        "line": 43,
        "column": 31
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::get_mut_by_id",
      "return_type": "-> Option<&mut LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 103,
          "column": 5
        },
        "end": {
          "line": 111,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 110,
        "column": 9
      },
      "end": {
        "line": 110,
        "column": 67
      }
    },
    "replacement": "Some(Box::leak(Box::new(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_min_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 176,
          "column": 1
        },
        "end": {
          "line": 191,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 185,
        "column": 5
      },
      "end": {
        "line": 190,
        "column": 11
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::price",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 15,
          "column": 5
        },
        "end": {
          "line": 18,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 9
      },
      "end": {
        "line": 17,
        "column": 26
      }
    },
    "replacement": "1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "Bba<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 30,
          "column": 5
        },
        "end": {
          "line": 34,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 19
      },
      "end": {
        "line": 33,
        "column": 20
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 39
      },
      "end": {
        "line": 144,
        "column": 40
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::signum",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 183,
          "column": 5
        },
        "end": {
          "line": 191,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 185,
        "column": 9
      },
      "end": {
        "line": 190,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 639,
        "column": 46
      },
      "end": {
        "line": 639,
        "column": 47
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::new_bucket",
      "return_type": "",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 43,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 36
      },
      "end": {
        "line": 41,
        "column": 37
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/load_trades_from_csv.rs",
    "function": {
      "function_name": "load_trades_from_csv",
      "return_type": "-> Vec<Trade<I, D, QuoteCurrency<I, D>>>",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 60,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 32
      },
      "end": {
        "line": 43,
        "column": 33
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 564,
        "column": 9
      },
      "end": {
        "line": 678,
        "column": 66
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::abs",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 173,
          "column": 5
        },
        "end": {
          "line": 176,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 175,
        "column": 9
      },
      "end": {
        "line": 175,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::increase_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 9
      },
      "end": {
        "line": 154,
        "column": 58
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::id",
      "return_type": "-> OrderId",
      "span": {
        "start": {
          "line": 294,
          "column": 5
        },
        "end": {
          "line": 298,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 297,
        "column": 9
      },
      "end": {
        "line": 297,
        "column": 33
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 187,
        "column": 37
      },
      "end": {
        "line": 187,
        "column": 39
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 162,
        "column": 57
      },
      "end": {
        "line": 162,
        "column": 58
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 375,
        "column": 9
      },
      "end": {
        "line": 409,
        "column": 43
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::is_in_bucket",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 34,
        "column": 23
      },
      "end": {
        "line": 34,
        "column": 24
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 216,
          "column": 5
        },
        "end": {
          "line": 219,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 16
      },
      "end": {
        "line": 218,
        "column": 17
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::size",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 20,
          "column": 5
        },
        "end": {
          "line": 26,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 22,
        "column": 9
      },
      "end": {
        "line": 25,
        "column": 10
      }
    },
    "replacement": "0.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 41
      },
      "end": {
        "line": 150,
        "column": 43
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_long",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 50,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 9
      },
      "end": {
        "line": 52,
        "column": 59
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 85,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 84,
        "column": 9
      },
      "end": {
        "line": 84,
        "column": 96
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 35
      },
      "end": {
        "line": 72,
        "column": 36
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 136,
        "column": 41
      },
      "end": {
        "line": 136,
        "column": 43
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for QuoteCurrency<I, D>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 262,
          "column": 5
        },
        "end": {
          "line": 264,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 263,
        "column": 9
      },
      "end": {
        "line": 263,
        "column": 38
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 84,
        "column": 25
      },
      "end": {
        "line": 84,
        "column": 26
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 131,
        "column": 26
      },
      "end": {
        "line": 131,
        "column": 28
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_limit_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 87,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 82,
        "column": 56
      },
      "end": {
        "line": 82,
        "column": 57
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 18
      },
      "end": {
        "line": 67,
        "column": 19
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 35
      },
      "end": {
        "line": 72,
        "column": 36
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 57
      },
      "end": {
        "line": 144,
        "column": 59
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::timestamp_exchange_ns",
      "return_type": "-> crate::prelude::TimestampNs",
      "span": {
        "start": {
          "line": 195,
          "column": 5
        },
        "end": {
          "line": 198,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 197,
        "column": 9
      },
      "end": {
        "line": 197,
        "column": 40
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/market_order.rs",
    "function": {
      "function_name": "MarketOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::new_with_user_order_id",
      "return_type": "-> Result<Self, OrderError>",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 111,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 101,
        "column": 9
      },
      "end": {
        "line": 110,
        "column": 11
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_min_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 176,
          "column": 1
        },
        "end": {
          "line": 191,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 186,
        "column": 30
      },
      "end": {
        "line": 186,
        "column": 32
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 43
      },
      "end": {
        "line": 144,
        "column": 44
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::net_balance",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 46,
          "column": 5
        },
        "end": {
          "line": 49,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 28
      },
      "end": {
        "line": 48,
        "column": 29
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 125,
        "column": 9
      },
      "end": {
        "line": 158,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 29
      },
      "end": {
        "line": 67,
        "column": 30
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::is_in_bucket",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 53
      },
      "end": {
        "line": 33,
        "column": 54
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 638,
        "column": 37
      },
      "end": {
        "line": 638,
        "column": 38
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 249,
        "column": 41
      },
      "end": {
        "line": 249,
        "column": 43
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::fees_paid",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 145,
          "column": 5
        },
        "end": {
          "line": 150,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 147,
        "column": 9
      },
      "end": {
        "line": 149,
        "column": 40
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 42
      },
      "end": {
        "line": 144,
        "column": 43
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 24
      },
      "end": {
        "line": 57,
        "column": 26
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/load_trades_from_csv.rs",
    "function": {
      "function_name": "load_trades_from_csv",
      "return_type": "-> Vec<Trade<I, D, QuoteCurrency<I, D>>>",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 60,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 43,
        "column": 32
      },
      "end": {
        "line": 43,
        "column": 33
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 39
      },
      "end": {
        "line": 144,
        "column": 40
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 42,
        "column": 5
      },
      "end": {
        "line": 50,
        "column": 6
      }
    },
    "replacement": "\"\"",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::post_debit",
      "return_type": "",
      "span": {
        "start": {
          "line": 36,
          "column": 5
        },
        "end": {
          "line": 39,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 28
      },
      "end": {
        "line": 38,
        "column": 30
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 80
      },
      "end": {
        "line": 150,
        "column": 82
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for LimitOrder<I, D, BaseOrQuote, UserOrderIdT, OrderStatus>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 62,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 63,
        "column": 9
      },
      "end": {
        "line": 67,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 42
      },
      "end": {
        "line": 144,
        "column": 43
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for MarketState<I, D>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 40,
          "column": 5
        },
        "end": {
          "line": 46,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 9
      },
      "end": {
        "line": 45,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 98,
        "column": 52
      },
      "end": {
        "line": 98,
        "column": 54
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 219,
        "column": 68
      },
      "end": {
        "line": 219,
        "column": 69
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::post_debit",
      "return_type": "",
      "span": {
        "start": {
          "line": 36,
          "column": 5
        },
        "end": {
          "line": 39,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 28
      },
      "end": {
        "line": 38,
        "column": 30
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 520,
        "column": 38
      },
      "end": {
        "line": 520,
        "column": 39
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/order_status.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for FilledQuantity<I, D, BaseOrQuote>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 81,
          "column": 5
        },
        "end": {
          "line": 93,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 82,
        "column": 9
      },
      "end": {
        "line": 92,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Div<Decimal<I, D>> for BaseCurrency<I, D>>::div",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 222,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 224,
        "column": 9
      },
      "end": {
        "line": 224,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::insert",
      "return_type": "-> crate::Result<Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>, >",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 91,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 78,
        "column": 9
      },
      "end": {
        "line": 90,
        "column": 17
      }
    },
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 154,
        "column": 13
      },
      "end": {
        "line": 154,
        "column": 15
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 193,
          "column": 5
        },
        "end": {
          "line": 196,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 195,
        "column": 9
      },
      "end": {
        "line": 195,
        "column": 33
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl One for BaseCurrency<I, D>>::is_one",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 149,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 154,
        "column": 15
      },
      "end": {
        "line": 154,
        "column": 17
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 82,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 81,
        "column": 31
      },
      "end": {
        "line": 81,
        "column": 32
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Zero for BaseCurrency<I, D>>::zero",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 127,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 126,
        "column": 9
      },
      "end": {
        "line": 126,
        "column": 30
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 152,
        "column": 23
      },
      "end": {
        "line": 152,
        "column": 25
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/side.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Side>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 39,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 38,
        "column": 9
      },
      "end": {
        "line": 38,
        "column": 30
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 155,
        "column": 9
      },
      "end": {
        "line": 176,
        "column": 10
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::update_state",
      "return_type": "-> Result<&Vec<LimitOrderUpdate<I, D, BaseOrQuote, UserOrderIdT>>>",
      "span": {
        "start": {
          "line": 152,
          "column": 5
        },
        "end": {
          "line": 188,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 169,
        "column": 9
      },
      "end": {
        "line": 187,
        "column": 38
      }
    },
    "replacement": "Ok(&vec![])",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 78,
          "column": 5
        },
        "end": {
          "line": 82,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 81,
        "column": 9
      },
      "end": {
        "line": 81,
        "column": 45
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::outstanding_fees",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 56,
          "column": 5
        },
        "end": {
          "line": 63,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 58,
        "column": 9
      },
      "end": {
        "line": 62,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 31
      },
      "end": {
        "line": 145,
        "column": 32
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 519,
        "column": 29
      },
      "end": {
        "line": 519,
        "column": 30
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 31
      },
      "end": {
        "line": 196,
        "column": 32
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::is_empty",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 64,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 63,
        "column": 9
      },
      "end": {
        "line": 63,
        "column": 30
      }
    },
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 193,
        "column": 49
      },
      "end": {
        "line": 193,
        "column": 50
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "max",
      "return_type": "-> T",
      "span": {
        "start": {
          "line": 29,
          "column": 1
        },
        "end": {
          "line": 40,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 35,
        "column": 11
      },
      "end": {
        "line": 35,
        "column": 12
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::append_limit_order",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 412,
          "column": 5
        },
        "end": {
          "line": 470,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 421,
        "column": 9
      },
      "end": {
        "line": 469,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 59
      },
      "end": {
        "line": 66,
        "column": 61
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 41
      },
      "end": {
        "line": 167,
        "column": 42
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for BaseCurrency<I, D>>::price_paid_for_qty",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 112,
          "column": 5
        },
        "end": {
          "line": 117,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 116,
        "column": 48
      },
      "end": {
        "line": 116,
        "column": 49
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_long",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 50,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 52,
        "column": 21
      },
      "end": {
        "line": 52,
        "column": 22
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/mod.rs",
    "function": {
      "function_name": "UserBalances<I, D, BaseOrQuote>::sum",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 70,
          "column": 5
        },
        "end": {
          "line": 73,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 72,
        "column": 39
      },
      "end": {
        "line": 72,
        "column": 40
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 153,
        "column": 37
      },
      "end": {
        "line": 153,
        "column": 38
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/fee.rs",
    "function": {
      "function_name": "<impl AsRef<Decimal<I, D>> for Fee<I, D, MakerTaker>>::as_ref",
      "return_type": "-> &Decimal<I, D>",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 29,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 28,
        "column": 9
      },
      "end": {
        "line": 28,
        "column": 20
      }
    },
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::update_market_state",
      "return_type": "",
      "span": {
        "start": {
          "line": 103,
          "column": 5
        },
        "end": {
          "line": 107,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 105,
        "column": 9
      },
      "end": {
        "line": 106,
        "column": 40
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 51
      },
      "end": {
        "line": 67,
        "column": 52
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 46,
        "column": 9
      },
      "end": {
        "line": 46,
        "column": 56
      }
    },
    "replacement": "",
    "genre": "MatchArm"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for Candle<I, D>>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 47,
          "column": 5
        },
        "end": {
          "line": 53,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 9
      },
      "end": {
        "line": 52,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_id.rs",
    "function": {
      "function_name": "OrderId::incr",
      "return_type": "",
      "span": {
        "start": {
          "line": 14,
          "column": 5
        },
        "end": {
          "line": 17,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 16,
        "column": 9
      },
      "end": {
        "line": 16,
        "column": 20
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 152,
        "column": 23
      },
      "end": {
        "line": 152,
        "column": 25
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Currency<I, D> for QuoteCurrency<I, D>>::convert_from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 102,
          "column": 5
        },
        "end": {
          "line": 104,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 103,
        "column": 9
      },
      "end": {
        "line": 103,
        "column": 66
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 79,
        "column": 21
      },
      "end": {
        "line": 79,
        "column": 23
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for BaseCurrency<I, D>>::price_paid_for_qty",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 112,
          "column": 5
        },
        "end": {
          "line": 117,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 113,
        "column": 9
      },
      "end": {
        "line": 116,
        "column": 71
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::quantize_round_to_zero",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 70,
          "column": 5
        },
        "end": {
          "line": 90,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 89,
        "column": 9
      },
      "end": {
        "line": 89,
        "column": 63
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 153,
        "column": 24
      },
      "end": {
        "line": 153,
        "column": 25
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/accounting/transaction.rs",
    "function": {
      "function_name": "account_from_int",
      "return_type": "-> &'static str",
      "span": {
        "start": {
          "line": 40,
          "column": 1
        },
        "end": {
          "line": 51,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 42,
        "column": 5
      },
      "end": {
        "line": 50,
        "column": 6
      }
    },
    "replacement": "\"xyzzy\"",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 26
      },
      "end": {
        "line": 144,
        "column": 27
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for BaseCurrency<I, D>>::pnl",
      "return_type": "-> BaseCurrency<I, D>",
      "span": {
        "start": {
          "line": 100,
          "column": 5
        },
        "end": {
          "line": 110,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 105,
        "column": 9
      },
      "end": {
        "line": 109,
        "column": 63
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/side.rs",
    "function": {
      "function_name": "Side::from_taker_quantity",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 21,
          "column": 5
        },
        "end": {
          "line": 33,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 26,
        "column": 9
      },
      "end": {
        "line": 32,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::amend_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 364,
          "column": 5
        },
        "end": {
          "line": 410,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 397,
        "column": 52
      },
      "end": {
        "line": 397,
        "column": 53
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 45
      },
      "end": {
        "line": 218,
        "column": 47
      }
    },
    "replacement": "/=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 25
      },
      "end": {
        "line": 90,
        "column": 26
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 98,
        "column": 34
      },
      "end": {
        "line": 98,
        "column": 35
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::new_bucket",
      "return_type": "",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 43,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 40,
        "column": 9
      },
      "end": {
        "line": 42,
        "column": 49
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 159,
        "column": 23
      },
      "end": {
        "line": 159,
        "column": 25
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::is_in_bucket",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 26,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 34,
        "column": 23
      },
      "end": {
        "line": 34,
        "column": 24
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 169,
        "column": 9
      },
      "end": {
        "line": 227,
        "column": 10
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Div<Decimal<I, D>> for QuoteCurrency<I, D>>::div",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 240,
          "column": 5
        },
        "end": {
          "line": 243,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 242,
        "column": 21
      },
      "end": {
        "line": 242,
        "column": 22
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 212,
        "column": 29
      },
      "end": {
        "line": 212,
        "column": 30
      }
    },
    "replacement": "",
    "genre": "UnaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Div<Decimal<I, D>> for QuoteCurrency<I, D>>::div",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 240,
          "column": 5
        },
        "end": {
          "line": 243,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 242,
        "column": 9
      },
      "end": {
        "line": 242,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 38
      },
      "end": {
        "line": 67,
        "column": 39
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::submit_market_order",
      "return_type": "-> Result<MarketOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 217,
          "column": 5
        },
        "end": {
          "line": 267,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 229,
        "column": 9
      },
      "end": {
        "line": 266,
        "column": 25
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for NoUserOrderId>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 11,
          "column": 5
        },
        "end": {
          "line": 13,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 12,
        "column": 9
      },
      "end": {
        "line": 12,
        "column": 22
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_meta.rs",
    "function": {
      "function_name": "<impl std::fmt::Display for ExchangeOrderMeta>::fmt",
      "return_type": "-> std::fmt::Result",
      "span": {
        "start": {
          "line": 29,
          "column": 5
        },
        "end": {
          "line": 35,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 30,
        "column": 9
      },
      "end": {
        "line": 34,
        "column": 10
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 37
      },
      "end": {
        "line": 66,
        "column": 38
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl One for QuoteCurrency<I, D>>::is_one",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 167,
          "column": 5
        },
        "end": {
          "line": 173,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 172,
        "column": 9
      },
      "end": {
        "line": 172,
        "column": 29
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/order_id.rs",
    "function": {
      "function_name": "OrderId::incr",
      "return_type": "",
      "span": {
        "start": {
          "line": 14,
          "column": 5
        },
        "end": {
          "line": 17,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 16,
        "column": 16
      },
      "end": {
        "line": 16,
        "column": 18
      }
    },
    "replacement": "*=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 219,
        "column": 35
      },
      "end": {
        "line": 219,
        "column": 36
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/order_id.rs",
    "function": {
      "function_name": "OrderId::incr",
      "return_type": "",
      "span": {
        "start": {
          "line": 14,
          "column": 5
        },
        "end": {
          "line": 17,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 16,
        "column": 16
      },
      "end": {
        "line": 16,
        "column": 18
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 58
      },
      "end": {
        "line": 150,
        "column": 60
      }
    },
    "replacement": "||",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 54,
        "column": 27
      },
      "end": {
        "line": 54,
        "column": 29
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_step_size",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 210,
          "column": 1
        },
        "end": {
          "line": 225,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 15
      },
      "end": {
        "line": 218,
        "column": 16
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 38
      },
      "end": {
        "line": 67,
        "column": 39
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::new_weighted_price",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 68,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 37
      },
      "end": {
        "line": 66,
        "column": 38
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::change_position",
      "return_type": "",
      "span": {
        "start": {
          "line": 83,
          "column": 5
        },
        "end": {
          "line": 260,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 168,
        "column": 56
      },
      "end": {
        "line": 168,
        "column": 57
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 639,
        "column": 46
      },
      "end": {
        "line": 639,
        "column": 47
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl One for BaseCurrency<I, D>>::is_one",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 149,
          "column": 5
        },
        "end": {
          "line": 155,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 154,
        "column": 9
      },
      "end": {
        "line": 154,
        "column": 29
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "PriceFilter<I, D>::validate_limit_price",
      "return_type": "-> Result<(), OrderError>",
      "span": {
        "start": {
          "line": 119,
          "column": 5
        },
        "end": {
          "line": 159,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 150,
        "column": 37
      },
      "end": {
        "line": 150,
        "column": 38
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::price",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 15,
          "column": 5
        },
        "end": {
          "line": 18,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 9
      },
      "end": {
        "line": 17,
        "column": 26
      }
    },
    "replacement": "-1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 519,
        "column": 29
      },
      "end": {
        "line": 519,
        "column": 30
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl One for QuoteCurrency<I, D>>::set_one",
      "return_type": "",
      "span": {
        "start": {
          "line": 162,
          "column": 5
        },
        "end": {
          "line": 165,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 164,
        "column": 9
      },
      "end": {
        "line": 164,
        "column": 28
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 148,
        "column": 55
      },
      "end": {
        "line": 148,
        "column": 56
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 216,
          "column": 5
        },
        "end": {
          "line": 219,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 16
      },
      "end": {
        "line": 218,
        "column": 17
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Into<f64> for QuoteCurrency<I, D>>::into",
      "return_type": "-> f64",
      "span": {
        "start": {
          "line": 271,
          "column": 5
        },
        "end": {
          "line": 274,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 273,
        "column": 9
      },
      "end": {
        "line": 273,
        "column": 24
      }
    },
    "replacement": "1.0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 98,
        "column": 23
      },
      "end": {
        "line": 98,
        "column": 24
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::remove",
      "return_type": "",
      "span": {
        "start": {
          "line": 62,
          "column": 5
        },
        "end": {
          "line": 76,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 64,
        "column": 9
      },
      "end": {
        "line": 75,
        "column": 10
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 198,
          "column": 5
        },
        "end": {
          "line": 201,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 16
      },
      "end": {
        "line": 200,
        "column": 17
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Zero for QuoteCurrency<I, D>>::zero",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 142,
          "column": 5
        },
        "end": {
          "line": 145,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 144,
        "column": 9
      },
      "end": {
        "line": 144,
        "column": 70
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 9
      },
      "end": {
        "line": 74,
        "column": 10
      }
    },
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::total_quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 278,
          "column": 5
        },
        "end": {
          "line": 292,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 285,
        "column": 42
      },
      "end": {
        "line": 285,
        "column": 43
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::is_empty",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 60,
          "column": 5
        },
        "end": {
          "line": 64,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 63,
        "column": 9
      },
      "end": {
        "line": 63,
        "column": 30
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_step_size",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 210,
          "column": 1
        },
        "end": {
          "line": 225,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 218,
        "column": 5
      },
      "end": {
        "line": 224,
        "column": 11
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Mul<Decimal<I, D>> for QuoteCurrency<I, D>>::mul",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 228,
          "column": 5
        },
        "end": {
          "line": 231,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 230,
        "column": 21
      },
      "end": {
        "line": 230,
        "column": 22
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_maintenance_margin",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 89,
          "column": 5
        },
        "end": {
          "line": 115,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 108,
        "column": 39
      },
      "end": {
        "line": 108,
        "column": 40
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::check_active_orders",
      "return_type": "",
      "span": {
        "start": {
          "line": 557,
          "column": 5
        },
        "end": {
          "line": 679,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 566,
        "column": 12
      },
      "end": {
        "line": 566,
        "column": 13
      }
    },
    "replacement": "",
    "genre": "UnaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 167,
        "column": 36
      },
      "end": {
        "line": 167,
        "column": 37
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/quantity_filter.rs",
    "function": {
      "function_name": "QuantityFilter<I, D, BaseOrQuote>::validate_order_quantity",
      "return_type": "-> std::result::Result<(), OrderError>",
      "span": {
        "start": {
          "line": 75,
          "column": 5
        },
        "end": {
          "line": 102,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 84,
        "column": 25
      },
      "end": {
        "line": 84,
        "column": 26
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for QuoteCurrency<I, D>>::price_paid_for_qty",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 135,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 134,
        "column": 44
      },
      "end": {
        "line": 134,
        "column": 45
      }
    },
    "replacement": "*",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::update_market_state",
      "return_type": "",
      "span": {
        "start": {
          "line": 85,
          "column": 5
        },
        "end": {
          "line": 88,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 87,
        "column": 9
      },
      "end": {
        "line": 87,
        "column": 55
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Currency<I, D> for BaseCurrency<I, D>>::convert_from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 86,
          "column": 5
        },
        "end": {
          "line": 88,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 87,
        "column": 9
      },
      "end": {
        "line": 87,
        "column": 65
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Currency<I, D> for QuoteCurrency<I, D>>::convert_from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 102,
          "column": 5
        },
        "end": {
          "line": 104,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 103,
        "column": 39
      },
      "end": {
        "line": 103,
        "column": 40
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl std::ops::Mul<Decimal<I, D>> for QuoteCurrency<I, D>>::mul",
      "return_type": "-> Self::Output",
      "span": {
        "start": {
          "line": 228,
          "column": 5
        },
        "end": {
          "line": 231,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 230,
        "column": 9
      },
      "end": {
        "line": 230,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::submit_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 298,
          "column": 5
        },
        "end": {
          "line": 362,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 341,
        "column": 47
      },
      "end": {
        "line": 341,
        "column": 49
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_negative",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 198,
          "column": 5
        },
        "end": {
          "line": 201,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 16
      },
      "end": {
        "line": 200,
        "column": 17
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/timestamp_ns.rs",
    "function": {
      "function_name": "<impl AsRef<i64> for TimestampNs>::as_ref",
      "return_type": "-> &i64",
      "span": {
        "start": {
          "line": 35,
          "column": 5
        },
        "end": {
          "line": 38,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 37,
        "column": 9
      },
      "end": {
        "line": 37,
        "column": 16
      }
    },
    "replacement": "&0",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_buy_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 124,
          "column": 5
        },
        "end": {
          "line": 174,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 145,
        "column": 31
      },
      "end": {
        "line": 145,
        "column": 32
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::update",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 41,
          "column": 5
        },
        "end": {
          "line": 60,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 45,
        "column": 9
      },
      "end": {
        "line": 59,
        "column": 15
      }
    },
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::get_by_id",
      "return_type": "-> Option<&LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 93,
          "column": 5
        },
        "end": {
          "line": 101,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 100,
        "column": 51
      },
      "end": {
        "line": 100,
        "column": 53
      }
    },
    "replacement": "!=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/utils.rs",
    "function": {
      "function_name": "decimal_from_f64",
      "return_type": "-> Result<Decimal<I, D>>",
      "span": {
        "start": {
          "line": 57,
          "column": 1
        },
        "end": {
          "line": 67,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 61,
        "column": 5
      },
      "end": {
        "line": 66,
        "column": 6
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/leverage.rs",
    "function": {
      "function_name": "Leverage<I, D>::init_margin_req",
      "return_type": "-> Decimal<I, D>",
      "span": {
        "start": {
          "line": 38,
          "column": 5
        },
        "end": {
          "line": 42,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 9
      },
      "end": {
        "line": 41,
        "column": 32
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 196,
        "column": 31
      },
      "end": {
        "line": 196,
        "column": 32
      }
    },
    "replacement": "-",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/trade_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Trade<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 52,
          "column": 5
        },
        "end": {
          "line": 75,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 66,
        "column": 37
      },
      "end": {
        "line": 66,
        "column": 38
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_margin.rs",
    "function": {
      "function_name": "OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 87,
          "column": 5
        },
        "end": {
          "line": 168,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 138,
        "column": 23
      },
      "end": {
        "line": 138,
        "column": 25
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::aquire",
      "return_type": "-> crate::Result<()>",
      "span": {
        "start": {
          "line": 45,
          "column": 5
        },
        "end": {
          "line": 59,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 24
      },
      "end": {
        "line": 57,
        "column": 26
      }
    },
    "replacement": "+=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for BaseCurrency<I, D>>::price_paid_for_qty",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 112,
          "column": 5
        },
        "end": {
          "line": 117,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 116,
        "column": 48
      },
      "end": {
        "line": 116,
        "column": 49
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::total_quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 278,
          "column": 5
        },
        "end": {
          "line": 292,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 280,
        "column": 9
      },
      "end": {
        "line": 291,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 211,
          "column": 5
        },
        "end": {
          "line": 214,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 213,
        "column": 9
      },
      "end": {
        "line": 213,
        "column": 33
      }
    },
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/load_trades_from_csv.rs",
    "function": {
      "function_name": "load_trades_from_csv",
      "return_type": "-> Vec<Trade<I, D, QuoteCurrency<I, D>>>",
      "span": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 60,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 21,
        "column": 5
      },
      "end": {
        "line": 59,
        "column": 8
      }
    },
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::values_mut",
      "return_type": "-> impl Iterator<Item =&mut LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 156,
          "column": 5
        },
        "end": {
          "line": 162,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 161,
        "column": 9
      },
      "end": {
        "line": 161,
        "column": 30
      }
    },
    "replacement": "::std::iter::empty()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::set_user_order_id",
      "return_type": "",
      "span": {
        "start": {
          "line": 148,
          "column": 5
        },
        "end": {
          "line": 152,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 151,
        "column": 9
      },
      "end": {
        "line": 151,
        "column": 44
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::check_market_sell_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 176,
          "column": 5
        },
        "end": {
          "line": 225,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 217,
        "column": 46
      },
      "end": {
        "line": 217,
        "column": 47
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 173,
        "column": 35
      },
      "end": {
        "line": 173,
        "column": 36
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/bba_update.rs",
    "function": {
      "function_name": "Bba<I, D>::mid_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 30,
          "column": 5
        },
        "end": {
          "line": 34,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 33,
        "column": 31
      },
      "end": {
        "line": 33,
        "column": 32
      }
    },
    "replacement": "%",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_limit_order",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 66,
          "column": 5
        },
        "end": {
          "line": 87,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 82,
        "column": 29
      },
      "end": {
        "line": 82,
        "column": 30
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::entry_price",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 65,
          "column": 5
        },
        "end": {
          "line": 72,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 67,
        "column": 9
      },
      "end": {
        "line": 71,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/utils.rs",
    "function": {
      "function_name": "debug_assert_accounting_equation",
      "return_type": "",
      "span": {
        "start": {
          "line": 4,
          "column": 1
        },
        "end": {
          "line": 26,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 14,
        "column": 5
      },
      "end": {
        "line": 25,
        "column": 7
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/trade_aggregation.rs",
    "function": {
      "function_name": "<impl TakerTrade for Trade<I, D, BaseOrQuote>>::timestamp",
      "return_type": "-> i64",
      "span": {
        "start": {
          "line": 10,
          "column": 5
        },
        "end": {
          "line": 13,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 12,
        "column": 9
      },
      "end": {
        "line": 12,
        "column": 45
      }
    },
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::abs",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 194,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 193,
        "column": 9
      },
      "end": {
        "line": 193,
        "column": 27
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::remove_executed_order_from_active",
      "return_type": "",
      "span": {
        "start": {
          "line": 544,
          "column": 5
        },
        "end": {
          "line": 555,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 551,
        "column": 9
      },
      "end": {
        "line": 554,
        "column": 48
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "IsolatedMarginRiskEngine<I, D, BaseOrQuote>::quantity_minus_position",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 227,
          "column": 5
        },
        "end": {
          "line": 233,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 232,
        "column": 18
      },
      "end": {
        "line": 232,
        "column": 19
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>::fill",
      "return_type": "-> Option<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Filled<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 191,
          "column": 5
        },
        "end": {
          "line": 265,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 200,
        "column": 9
      },
      "end": {
        "line": 264,
        "column": 13
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl One for BaseCurrency<I, D>>::set_one",
      "return_type": "",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 147,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 146,
        "column": 9
      },
      "end": {
        "line": 146,
        "column": 28
      }
    },
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/in_memory_accounting.rs",
    "function": {
      "function_name": "<impl TransactionAccounting<I, D, BaseOrQuote> for InMemoryTransactionAccounting<I, D, BaseOrQuote>>::margin_balance_of",
      "return_type": "-> Result<BaseOrQuote>",
      "span": {
        "start": {
          "line": 95,
          "column": 5
        },
        "end": {
          "line": 101,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 97,
        "column": 9
      },
      "end": {
        "line": 100,
        "column": 50
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_state.rs",
    "function": {
      "function_name": "MarketState<I, D>::update_state",
      "return_type": "-> Result<()>",
      "span": {
        "start": {
          "line": 53,
          "column": 5
        },
        "end": {
          "line": 76,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 73,
        "column": 19
      },
      "end": {
        "line": 73,
        "column": 21
      }
    },
    "replacement": "-=",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 35
      },
      "end": {
        "line": 163,
        "column": 36
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/active_limit_orders.rs",
    "function": {
      "function_name": "ActiveLimitOrders<I, D, BaseOrQuote, UserOrderIdT>::get_by_id",
      "return_type": "-> Option<&LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 93,
          "column": 5
        },
        "end": {
          "line": 101,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 100,
        "column": 9
      },
      "end": {
        "line": 100,
        "column": 63
      }
    },
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_rate_limiter.rs",
    "function": {
      "function_name": "OrderRateLimiter::new_bucket",
      "return_type": "",
      "span": {
        "start": {
          "line": 37,
          "column": 5
        },
        "end": {
          "line": 43,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 41,
        "column": 41
      },
      "end": {
        "line": 41,
        "column": 42
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::submit_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 298,
          "column": 5
        },
        "end": {
          "line": 362,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 308,
        "column": 9
      },
      "end": {
        "line": 361,
        "column": 18
      }
    },
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/mock_exchange.rs",
    "function": {
      "function_name": "mock_exchange_inverse",
      "return_type": "-> Exchange<i64, DECIMALS, QuoteCurrency<i64, DECIMALS>, NoUserOrderId, InMemoryTransactionAccounting<i64, DECIMALS, BaseCurrency<i64, DECIMALS>>, >",
      "span": {
        "start": {
          "line": 80,
          "column": 1
        },
        "end": {
          "line": 107,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 90,
        "column": 5
      },
      "end": {
        "line": 106,
        "column": 26
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/exchange.rs",
    "function": {
      "function_name": "Exchange<I, D, BaseOrQuote, UserOrderIdT, TransactionAccountingT>::cancel_limit_order",
      "return_type": "-> Result<LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>>",
      "span": {
        "start": {
          "line": 472,
          "column": 5
        },
        "end": {
          "line": 542,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 520,
        "column": 38
      },
      "end": {
        "line": 520,
        "column": 39
      }
    },
    "replacement": "+",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position_inner.rs",
    "function": {
      "function_name": "PositionInner<I, D, BaseOrQuote>::decrease_contracts",
      "return_type": "",
      "span": {
        "start": {
          "line": 157,
          "column": 5
        },
        "end": {
          "line": 228,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 217,
        "column": 34
      },
      "end": {
        "line": 217,
        "column": 35
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::total_quantity",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 154,
          "column": 5
        },
        "end": {
          "line": 158,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 157,
        "column": 9
      },
      "end": {
        "line": 157,
        "column": 32
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/order_filters/price_filter.rs",
    "function": {
      "function_name": "enforce_min_price",
      "return_type": "-> Result<(), FilterError>",
      "span": {
        "start": {
          "line": 176,
          "column": 1
        },
        "end": {
          "line": 191,
          "column": 2
        }
      }
    },
    "span": {
      "start": {
        "line": 186,
        "column": 18
      },
      "end": {
        "line": 186,
        "column": 19
      }
    },
    "replacement": ">",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/timestamp_ns.rs",
    "function": {
      "function_name": "<impl From<i64> for TimestampNs>::from",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 15,
          "column": 5
        },
        "end": {
          "line": 18,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 17,
        "column": 9
      },
      "end": {
        "line": 17,
        "column": 20
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/base_currency.rs",
    "function": {
      "function_name": "<impl Signed for BaseCurrency<I, D>>::is_positive",
      "return_type": "-> bool",
      "span": {
        "start": {
          "line": 193,
          "column": 5
        },
        "end": {
          "line": 196,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 195,
        "column": 16
      },
      "end": {
        "line": 195,
        "column": 17
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/position.rs",
    "function": {
      "function_name": "Position<I, D, BaseOrQuote>::total_cost",
      "return_type": "-> BaseOrQuote::PairedCurrency",
      "span": {
        "start": {
          "line": 74,
          "column": 5
        },
        "end": {
          "line": 81,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 76,
        "column": 9
      },
      "end": {
        "line": 80,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl Signed for QuoteCurrency<I, D>>::abs_sub",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 196,
          "column": 5
        },
        "end": {
          "line": 199,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 198,
        "column": 9
      },
      "end": {
        "line": 198,
        "column": 39
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/accounting/account.rs",
    "function": {
      "function_name": "TAccount<I, D, BaseOrQuote>::net_balance",
      "return_type": "-> BaseOrQuote",
      "span": {
        "start": {
          "line": 46,
          "column": 5
        },
        "end": {
          "line": 49,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 48,
        "column": 9
      },
      "end": {
        "line": 48,
        "column": 49
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/candle_update.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for Candle<I, D>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 63,
          "column": 5
        },
        "end": {
          "line": 83,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 68,
        "column": 9
      },
      "end": {
        "line": 82,
        "column": 10
      }
    },
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "<impl MarginCurrency<I, D> for QuoteCurrency<I, D>>::price_paid_for_qty",
      "return_type": "-> QuoteCurrency<I, D>",
      "span": {
        "start": {
          "line": 129,
          "column": 5
        },
        "end": {
          "line": 135,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 130,
        "column": 9
      },
      "end": {
        "line": 134,
        "column": 65
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "lfest",
    "file": "src/market_update/smart_candle.rs",
    "function": {
      "function_name": "<impl MarketUpdate<I, D, BaseOrQuote> for SmartCandle<I, D, BaseOrQuote>>::limit_order_filled",
      "return_type": "-> Option<BaseOrQuote>",
      "span": {
        "start": {
          "line": 144,
          "column": 5
        },
        "end": {
          "line": 177,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 163,
        "column": 35
      },
      "end": {
        "line": 163,
        "column": 36
      }
    },
    "replacement": "==",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/risk_engine/isolated_margin.rs",
    "function": {
      "function_name": "<impl RiskEngine<I, D, BaseOrQuote, UserOrderIdT> for IsolatedMarginRiskEngine<I, D, BaseOrQuote>>::check_maintenance_margin",
      "return_type": "-> Result<(), RiskError>",
      "span": {
        "start": {
          "line": 89,
          "column": 5
        },
        "end": {
          "line": 115,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 108,
        "column": 39
      },
      "end": {
        "line": 108,
        "column": 40
      }
    },
    "replacement": "<",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/smol_currency/quote_currency.rs",
    "function": {
      "function_name": "QuoteCurrency<I, D>::liquidation_price_short",
      "return_type": "-> Self",
      "span": {
        "start": {
          "line": 55,
          "column": 5
        },
        "end": {
          "line": 58,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 57,
        "column": 21
      },
      "end": {
        "line": 57,
        "column": 22
      }
    },
    "replacement": "/",
    "genre": "BinaryOperator"
  },
  {
    "package": "lfest",
    "file": "src/types/limit_order.rs",
    "function": {
      "function_name": "LimitOrder<I, D, BaseOrQuote, UserOrderIdT, NewOrder>::into_pending",
      "return_type": "-> LimitOrder<I, D, BaseOrQuote, UserOrderIdT, Pending<I, D, BaseOrQuote>>",
      "span": {
        "start": {
          "line": 160,
          "column": 5
        },
        "end": {
          "line": 173,
          "column": 6
        }
      }
    },
    "span": {
      "start": {
        "line": 165,
        "column": 9
      },
      "end": {
        "line": 172,
        "column": 10
      }
    },
    "replacement": "Default::default()",
    "genre": "FnValue"
  }
]