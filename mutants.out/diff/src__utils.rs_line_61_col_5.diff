--- src/utils.rs
+++ replace decimal_from_f64 -> Result<Decimal<I, D>> with Ok(Default::default())
@@ -53,22 +53,17 @@
         .expect("is valid");
     assert!(wallet_balance >= BaseOrQuote::zero());
 }
 
 /// Create a `Decimal` from an `f64` value.
 // TODO: maybe upstream this impl to `const_decimal`
 #[inline(always)]
 pub fn decimal_from_f64<I: Mon<D>, const D: u8>(val: f64) -> Result<Decimal<I, D>> {
-    let scaling_factor = 10_f64.powi(D as i32);
-    let scaled: f64 = (val * scaling_factor).round();
-    Ok(
-        Decimal::try_from_scaled(I::from(scaled as i64).ok_or(Error::IntegerConversion)?, D)
-            .ok_or(Error::UnableToCreateDecimal)?,
-    )
+    Ok(Default::default()) /* ~ changed by cargo-mutants ~ */
 }
 
 #[cfg(test)]
 pub(crate) mod tests {
     use const_decimal::Decimal;
 
     use crate::utils::decimal_from_f64;
 
