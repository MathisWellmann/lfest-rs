--- src/position_inner.rs
+++ replace PositionInner<I, D, BaseOrQuote>::decrease_contracts with ()
@@ -161,75 +161,17 @@
         liquidation_price: QuoteCurrency<I, D>,
         accounting: &mut Acc,
         init_margin_req: Decimal<I, D>,
         direction_multiplier: i8,
         fees: BaseOrQuote::PairedCurrency,
     ) where
         Acc: TransactionAccounting<I, D, BaseOrQuote::PairedCurrency>,
     {
-        debug!(
-            "decrease_contracts: qty: {qty} @ {liquidation_price}; self: {}",
-            self
-        );
-        assert2::assert!(qty > BaseOrQuote::zero());
-        assert2::assert!(qty <= self.quantity);
-        debug_assert!(direction_multiplier == 1 || direction_multiplier == -1);
-
-        let entry_price = self.entry_price();
-
-        self.quantity -= qty;
-        self.outstanding_fees += fees;
-
-        debug_assert!(self.quantity >= BaseOrQuote::zero());
-
-        let pnl = BaseOrQuote::PairedCurrency::pnl(
-            entry_price,
-            liquidation_price,
-            if direction_multiplier == 1 { qty } else { -qty },
-        );
-        match pnl.cmp(&BaseOrQuote::PairedCurrency::zero()) {
-            Ordering::Greater => {
-                let transaction = Transaction::new(USER_WALLET_ACCOUNT, TREASURY_ACCOUNT, pnl);
-                accounting
-                    .create_margin_transfer(transaction)
-                    .expect("margin transfer must work");
-            }
-            Ordering::Less => {
-                let transaction =
-                    Transaction::new(TREASURY_ACCOUNT, USER_WALLET_ACCOUNT, pnl.abs());
-                accounting
-                    .create_margin_transfer(transaction)
-                    .expect("margin transfer must work");
-            }
-            Ordering::Equal => {}
-        }
-        let margin_to_free =
-            BaseOrQuote::PairedCurrency::convert_from(qty, entry_price) * init_margin_req;
-        debug_assert!(margin_to_free > BaseOrQuote::PairedCurrency::zero());
-        let transaction = Transaction::new(
-            USER_WALLET_ACCOUNT,
-            USER_POSITION_MARGIN_ACCOUNT,
-            margin_to_free,
-        );
-        accounting
-            .create_margin_transfer(transaction)
-            .expect("margin transfer must work");
-
-        if self.outstanding_fees > BaseOrQuote::PairedCurrency::zero() {
-            let transaction = Transaction::new(
-                EXCHANGE_FEE_ACCOUNT,
-                USER_WALLET_ACCOUNT,
-                self.outstanding_fees,
-            );
-            accounting
-                .create_margin_transfer(transaction)
-                .expect("margin transfer must work");
-            self.outstanding_fees = BaseOrQuote::PairedCurrency::zero();
-        }
+        () /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[cfg(test)]
 mod tests {
     use const_decimal::Decimal;
     use num_traits::One;
 
