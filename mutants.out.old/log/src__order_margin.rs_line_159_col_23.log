
*** src/order_margin.rs:159:23: replace += with -= in OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal

*** mutation diff:
--- src/order_margin.rs
+++ replace += with -= in OrderMargin<I, D, BaseOrQuote, UserOrderIdT>::order_margin_internal
@@ -151,17 +151,17 @@
                     buy_orders[i].1 = new_qty;
                     i += 1;
                 }
             }
         }
 
         let mut buy_value = BaseOrQuote::PairedCurrency::zero();
         buy_orders.iter().for_each(|(price, qty)| {
-            buy_value += BaseOrQuote::PairedCurrency::convert_from(*qty, *price)
+            buy_value -= /* ~ changed by cargo-mutants ~ */ BaseOrQuote::PairedCurrency::convert_from(*qty, *price)
         });
 
         let mut sell_value = BaseOrQuote::PairedCurrency::zero();
         sell_orders.iter().for_each(|(price, qty)| {
             sell_value += BaseOrQuote::PairedCurrency::convert_from(*qty, *price)
         });
 
         max(buy_value, sell_value) * init_margin_req


*** /nix/store/v2d7zb1wrsn94pv0hdl4v5nj96msh0lf-cargo-1.85.0-x86_64-unknown-linux-gnu/bin/cargo test --no-run --verbose --package=lfest@0.101.0
       Fresh unicode-ident v1.0.18
       Fresh proc-macro2 v1.0.94
       Fresh quote v1.0.39
       Fresh syn v2.0.99
       Fresh cfg-if v1.0.0
       Fresh autocfg v1.4.0
       Fresh serde_derive v1.0.218
       Fresh once_cell v1.20.3
       Fresh memchr v2.7.4
       Fresh itoa v1.0.15
       Fresh ryu v1.0.20
       Fresh regex-syntax v0.8.5
       Fresh zerocopy-derive v0.7.35
       Fresh byteorder v1.5.0
       Fresh regex-syntax v0.6.29
       Fresh tracing-attributes v0.1.28
       Fresh thiserror-impl v1.0.69
       Fresh proc-macro-error-attr2 v2.0.0
       Fresh either v1.14.0
       Fresh regex-automata v0.4.9
       Fresh tracing-core v0.1.33
       Fresh zerocopy v0.7.35
       Fresh regex-automata v0.1.10
       Fresh pin-project-lite v0.2.16
       Fresh lazy_static v1.5.0
       Fresh overload v0.1.1
       Fresh log v0.4.26
       Fresh unicode-segmentation v1.12.0
       Fresh proc-macro-error2 v2.0.1
       Fresh csv-core v0.1.12
       Fresh thread_local v1.1.8
       Fresh half v2.4.1
       Fresh plotters-backend v0.3.7
       Fresh ciborium-io v0.2.2
       Fresh anstyle v1.0.10
       Fresh clap_lex v0.7.4
       Fresh ruint-macro v1.2.1
       Fresh smallvec v1.14.0
       Fresh unicode-xid v0.2.6
       Fresh itertools v0.10.5
       Fresh test-case-core v3.3.1
       Fresh thiserror-impl v2.0.12
       Fresh typed-builder-macro v0.20.0
       Fresh yansi v1.0.1
       Fresh diff v0.1.13
       Fresh cast v0.3.0
       Fresh foldhash v0.1.4
       Fresh equivalent v1.0.2
       Fresh fpdec-core v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh same-file v1.0.6
       Fresh allocator-api2 v0.2.21
       Fresh tracing-test-macro v0.2.5
       Fresh glidesort v0.1.2
       Fresh oorandom v11.1.4
       Fresh anes v0.1.6
       Fresh distrs v0.2.2
       Fresh base64 v0.21.7
       Fresh libm v0.2.11
       Fresh serde v1.0.218
       Fresh libc v0.2.170
       Fresh semver v1.0.26
       Fresh crossbeam-utils v0.8.21
       Fresh regex v1.11.1
       Fresh tracing-log v0.2.0
       Fresh thiserror v1.0.69
       Fresh sharded-slab v0.1.7
       Fresh matchers v0.1.0
       Fresh nu-ansi-term v0.46.0
       Fresh tracing v0.1.41
       Fresh ppv-lite86 v0.2.20
       Fresh convert_case v0.7.1
       Fresh clap_builder v4.5.31
       Fresh getset v0.1.5
       Fresh ciborium-ll v0.2.2
       Fresh ruint v1.13.1
       Fresh plotters-svg v0.3.7
       Fresh paste v1.0.15
       Fresh test-case-macros v3.3.1
       Fresh fpdec-macros v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh walkdir v2.5.0
       Fresh typed-builder v0.20.0
       Fresh criterion-plot v0.5.0
       Fresh hashbrown v0.15.2
       Fresh num-traits v0.2.19
       Fresh rustc_version v0.4.1
       Fresh crossbeam-epoch v0.9.18
       Fresh getrandom v0.3.1
       Fresh is-terminal v0.4.15
       Fresh csv v1.3.1
       Fresh zerocopy v0.8.21
       Fresh syn v1.0.109
       Fresh tracing-subscriber v0.3.19
       Fresh derive_more-impl v2.0.1
       Fresh serde_json v1.0.140
       Fresh ciborium v0.2.2
       Fresh clap v4.5.31
       Fresh bitflags v2.9.0
       Fresh thiserror v2.0.12
       Fresh test-case v3.3.1
       Fresh num-integer v0.1.46
       Fresh rand_core v0.9.3
       Fresh num-complex v0.4.6
       Fresh crossbeam-deque v0.8.6
       Fresh plotters v0.3.7
       Fresh tinytemplate v1.2.1
       Fresh derive_more v2.0.1
       Fresh const-decimal v0.3.0 (https://github.com/OliverNChalk/const-decimal#7bf77bf3)
       Fresh trade_aggregation_derive v0.4.1
       Fresh fpdec v0.10.3 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh tracing-test v0.2.5
       Fresh ron v0.8.1
       Fresh num-bigint v0.4.6
       Fresh num-iter v0.1.45
       Fresh rand_chacha v0.9.0
       Fresh rayon-core v1.12.1
       Fresh trade_aggregation v12.0.3
       Fresh num-rational v0.4.2
       Fresh assert2-macros v0.3.15
       Fresh rayon v1.10.0
       Fresh rand v0.9.0
       Fresh num v0.4.3
       Fresh assert2 v0.3.15
       Fresh rand_distr v0.5.1
       Fresh criterion v0.5.1
       Fresh sliding_features v6.0.0
       Dirty lfest v0.101.0 (/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp): the file `src/order_margin.rs` has changed (1741633911.618668835s, 2s after last build at 1741633909.304676496s)
   Compiling lfest v0.101.0 (/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp)
     Running `rustc --crate-name lfest --edition=2024 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=e38c20648c8acf1a -C extra-filename=-6c98b9dad13cebfc --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name lfest --edition=2024 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=42acac75bcd4402d -C extra-filename=-8d41768972dbddc8 --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rmeta --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rmeta --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rmeta --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rmeta --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rmeta --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rmeta --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rmeta --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rmeta --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rmeta --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rmeta --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rmeta --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rmeta --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rmeta --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rmeta --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rmeta`
     Running `rustc --crate-name inverse_futures --edition=2024 tests/inverse_futures.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=627ceed5ef226dc6 -C extra-filename=-6ef206ebf42eea73 --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name linear_futures --edition=2024 tests/linear_futures.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=d9b24d852be96abf -C extra-filename=-e52de928d03eefdc --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name basic --edition=2024 examples/basic.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=52fb7e4642438df9 -C extra-filename=-d3682d3003820b95 --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/examples -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name limit_orders_only --edition=2024 tests/limit_orders_only.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=c92fd88983cdfcdc -C extra-filename=-f59f525f5df1c0dc --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.14s
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/lfest-6c98b9dad13cebfc`
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/inverse_futures-6ef206ebf42eea73`
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/limit_orders_only-f59f525f5df1c0dc`
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/linear_futures-e52de928d03eefdc`

*** result: Success

*** /nix/store/v2d7zb1wrsn94pv0hdl4v5nj96msh0lf-cargo-1.85.0-x86_64-unknown-linux-gnu/bin/cargo test --verbose --package=lfest@0.101.0
       Fresh unicode-ident v1.0.18
       Fresh proc-macro2 v1.0.94
       Fresh quote v1.0.39
       Fresh syn v2.0.99
       Fresh autocfg v1.4.0
       Fresh cfg-if v1.0.0
       Fresh serde_derive v1.0.218
       Fresh once_cell v1.20.3
       Fresh memchr v2.7.4
       Fresh itoa v1.0.15
       Fresh regex-syntax v0.8.5
       Fresh ryu v1.0.20
       Fresh zerocopy-derive v0.7.35
       Fresh byteorder v1.5.0
       Fresh regex-syntax v0.6.29
       Fresh thiserror-impl v1.0.69
       Fresh tracing-attributes v0.1.28
       Fresh proc-macro-error-attr2 v2.0.0
       Fresh unicode-segmentation v1.12.0
       Fresh log v0.4.26
       Fresh lazy_static v1.5.0
       Fresh overload v0.1.1
       Fresh either v1.14.0
       Fresh libm v0.2.11
       Fresh tracing-core v0.1.33
       Fresh regex-automata v0.4.9
       Fresh zerocopy v0.7.35
       Fresh regex-automata v0.1.10
       Fresh pin-project-lite v0.2.16
       Fresh proc-macro-error2 v2.0.1
       Fresh csv-core v0.1.12
       Fresh sharded-slab v0.1.7
       Fresh thread_local v1.1.8
       Fresh convert_case v0.7.1
       Fresh nu-ansi-term v0.46.0
       Fresh half v2.4.1
       Fresh smallvec v1.14.0
       Fresh anstyle v1.0.10
       Fresh unicode-xid v0.2.6
       Fresh ciborium-io v0.2.2
       Fresh ruint-macro v1.2.1
       Fresh clap_lex v0.7.4
       Fresh plotters-backend v0.3.7
       Fresh itertools v0.10.5
       Fresh test-case-core v3.3.1
       Fresh thiserror-impl v2.0.12
       Fresh typed-builder-macro v0.20.0
       Fresh cast v0.3.0
       Fresh fpdec-core v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh diff v0.1.13
       Fresh same-file v1.0.6
       Fresh yansi v1.0.1
       Fresh foldhash v0.1.4
       Fresh equivalent v1.0.2
       Fresh allocator-api2 v0.2.21
       Fresh tracing-test-macro v0.2.5
       Fresh anes v0.1.6
       Fresh glidesort v0.1.2
       Fresh base64 v0.21.7
       Fresh oorandom v11.1.4
       Fresh distrs v0.2.2
       Fresh num-traits v0.2.19
       Fresh serde v1.0.218
       Fresh libc v0.2.170
       Fresh semver v1.0.26
       Fresh crossbeam-utils v0.8.21
       Fresh regex v1.11.1
       Fresh tracing-log v0.2.0
       Fresh matchers v0.1.0
       Fresh thiserror v1.0.69
       Fresh ppv-lite86 v0.2.20
       Fresh tracing v0.1.41
       Fresh paste v1.0.15
       Fresh zerocopy v0.8.21
       Fresh derive_more-impl v2.0.1
       Fresh plotters-svg v0.3.7
       Fresh clap_builder v4.5.31
       Fresh syn v1.0.109
       Fresh getset v0.1.5
       Fresh ciborium-ll v0.2.2
       Fresh ruint v1.13.1
       Fresh hashbrown v0.15.2
       Fresh fpdec-macros v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh criterion-plot v0.5.0
       Fresh typed-builder v0.20.0
       Fresh test-case-macros v3.3.1
       Fresh walkdir v2.5.0
       Fresh num-integer v0.1.46
       Fresh rustc_version v0.4.1
       Fresh getrandom v0.3.1
       Fresh crossbeam-epoch v0.9.18
       Fresh num-complex v0.4.6
       Fresh is-terminal v0.4.15
       Fresh tracing-subscriber v0.3.19
       Fresh csv v1.3.1
       Fresh serde_json v1.0.140
       Fresh const-decimal v0.3.0 (https://github.com/OliverNChalk/const-decimal#7bf77bf3)
       Fresh bitflags v2.9.0
       Fresh plotters v0.3.7
       Fresh clap v4.5.31
       Fresh derive_more v2.0.1
       Fresh ciborium v0.2.2
       Fresh trade_aggregation_derive v0.4.1
       Fresh thiserror v2.0.12
       Fresh fpdec v0.10.3 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh test-case v3.3.1
       Fresh num-bigint v0.4.6
       Fresh num-iter v0.1.45
       Fresh crossbeam-deque v0.8.6
       Fresh rand_core v0.9.3
       Fresh tinytemplate v1.2.1
       Fresh tracing-test v0.2.5
       Fresh ron v0.8.1
       Fresh trade_aggregation v12.0.3
       Fresh num-rational v0.4.2
       Fresh rayon-core v1.12.1
       Fresh rand_chacha v0.9.0
       Fresh assert2-macros v0.3.15
       Fresh num v0.4.3
       Fresh rand v0.9.0
       Fresh rayon v1.10.0
       Fresh sliding_features v6.0.0
       Fresh assert2 v0.3.15
       Fresh criterion v0.5.1
       Fresh rand_distr v0.5.1
       Fresh lfest v0.101.0 (/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.10s
     Running `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/lfest-6c98b9dad13cebfc`

running 697 tests
test active_limit_orders::tests::size_of_optional_reference ... ok
test market_update::bba_update::tests::size_of_bba ... ok
test active_limit_orders::tests::active_limit_orders ... ok
test market_update::candle_update::test::candle_update ... ok
test market_update::smart_candle::tests::smart_candle_buy_side ... ok
test market_update::smart_candle::tests::size_of_smart_candle ... ok
test market_update::smart_candle::tests::smart_candle_execute_limit_order ... ok
test market_update::smart_candle::tests::smart_candle_no_buys ... ok
test market_update::smart_candle::tests::smart_candle_simple ... ok
test market_update::smart_candle::tests::smart_candle_sell_side ... ok
test market_update::trade_update::tests::size_of_trade ... ok
test market_update::smart_candle::tests::smart_candle_no_sells ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_3_side_buy_expects ... ok
test order_filters::price_filter::tests::price_filter ... ok
test order_filters::price_filter::tests::size_of_price_filter ... ok
test order_filters::quantity_filter::tests::quantity_filter_2 ... ok
test order_filters::quantity_filter::tests::quantity_filter ... ok
test order_filters::quantity_filter::tests::size_of_quantity_filter ... ok
test order_margin::tests::order_margin_long_no_orders::_1_1_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_1_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_1_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_2_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_2_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_2_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_5_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_5_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_5_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_1_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_1_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_1_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_2_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_2_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_2_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_5_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_5_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_5_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_1_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_1_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_1_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_2_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_2_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_2_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_5_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_5_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_5_300_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_1_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_3_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_2_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_3_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_1_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_3_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_1_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_2_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_3_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_3_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_2_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_1_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_3_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_1_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_2_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_1_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_2_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_3_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_2_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_3_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_1_expects ... FAILED
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_no_orders::_1_expects ... ok
test order_margin::tests::order_margin_neutral_no_orders::_5_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_no_orders::_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_90_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_90_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_3_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_110_3_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_1_100_expects ... ok
test order_margin::tests::order_margin_no_position ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_90_2_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_2_100_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_110_2_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_1_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_2_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_1_200_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_90_3_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_2_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_2_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_2_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_2_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_5_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_5_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_5_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_5_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_5_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_5_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_1_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_1_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_1_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_1_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_1_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_1_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_2_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_5_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_2_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_2_300_expects ... ok
test position::tests::position_change_position_2 ... ignored
test order_margin::tests::order_margin_short_no_orders::_5_5_100_expects ... ok
test position::tests::size_of_position ... ok
test order_margin::tests::order_margin_with_long ... FAILED
test position_inner::tests::position_inner_decrease_contracts_2::_1_side_buy_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_1_side_sell_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_2_side_buy_expects ... ok
test position::tests::position_change_position ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_2_side_sell_expects ... ok
test order_rate_limiter::tests::order_rate_limiter ... ok
test position_inner::tests::position_inner_decrease_contracts_inverse::_1_expects ... ignored
test order_margin::tests::order_margin_with_short ... ok
test order_margin::tests::order_margin_short_no_orders::_5_5_300_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_5_side_sell_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_5_side_buy_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_inverse::_2_expects ... ignored
test position_inner::tests::position_inner_decrease_contracts_inverse::_5_expects ... ignored
test position_inner::tests::position_inner_decrease_contracts_basic::_1_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_basic::_5_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_basic::_2_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_1_side_buy_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_1_side_sell_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_2_side_buy_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_2_side_sell_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_5_side_buy_expects ... ok
test position_inner::tests::position_inner_entry_price_inverse::_10_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_5_side_sell_expects ... ok
test position_inner::tests::position_inner_entry_price_inverse::_20_expects ... ok
test position_inner::tests::position_inner_entry_price_inverse::_50_expects ... ok
test position_inner::tests::position_inner_entry_price_inverse::_90_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_1_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_2_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_5_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_9_expects ... ok
test position_inner::tests::position_inner_increase_contracts::_1_expects ... ok
test position_inner::tests::position_inner_increase_contracts::_2_expects ... ok
test position_inner::tests::position_inner_increase_contracts::_5_expects ... ok
test position_inner::tests::position_inner_new::_1_expects ... ok
test position_inner::tests::position_inner_new::_2_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_long::_2_75_expects ... ok
test position_inner::tests::position_inner_new::_5_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_long::_3_84_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_long::_5_90_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_short::_3_117_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_short::_2_126_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_quantity_minus_position ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_short::_5_111_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_3_0_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_5_0_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_1_0_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_10_0_expects ... ok
test tests::cancel_limit_order::cancel_limit_order ... FAILED
test tests::submit_limit_buy_order::submit_limit_buy_order_above_ask ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill_leading_to_cancel::basecurrency_new_1_0_expects ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill_leading_to_cancel::basecurrency_new_3_0_expects ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_turnaround_short ... ok
test tests::partial_order_fill::partial_limit_order_fill::with_buy_order ... ok
test types::leverage::tests::leverage_init_margin_req ... ok
test types::leverage::tests::size_of_leverage ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_100_1_expects ... ok
test tests::submit_limit_sell_order::submit_limit_sell_order_turnaround_long ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_110_1_expects ... ok
test types::fee::tests::size_of_fee ... ok
test types::leverage::tests::leverage ... ok
test tests::submit_market_sell_order::submit_market_sell_order_reject ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_100_2_expects ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill_leading_to_cancel::basecurrency_new_2_0_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_120_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_100_1_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_100_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_110_1_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_100_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_110_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_110_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_110_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_100_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_110_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_120_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_120_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_120_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_110_3_expects ... ok
test types::limit_order::tests::size_of_limit_order ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_100_1_expects ... ok
test types::side::tests::side_from_taker_quantity ... ok
test tests::submit_market_buy_order::submit_market_buy_order_reject ... ok
test types::side::tests::side_from_taker_quantity_panic - should panic ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_110_3_expects ... ok
test types::smol_currency::tests::base_currency_pnl ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill::basecurrency_new_6_0_expects ... ok
test types::smol_currency::tests::convert_quote_to_base ... ok
test types::smol_currency::tests::quote_currency_pnl ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_100_1_expects ... ok
test tests::partial_order_fill::partial_limit_order_fill::with_sell_order ... ok
test types::smol_currency::tests::convert_base_to_quote ... ok
test utils::tests::test_convert_decimals ... ok
test utils::tests::test_decimal_from_f64 ... ok
test tests::submit_market_sell_order::submit_market_sell_order ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_no_position ... FAILED
test tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max ... FAILED
test tests::submit_market_buy_order::submit_market_buy_order_with_long_position ... ok
test tests::submit_market_buy_order::submit_market_buy_order_no_position ... ok
test tests::submit_market_sell_order::submit_market_sell_order_with_long_position ... ok
test tests::submit_limit_sell_order::submit_limit_sell_order_below_bid ... ok
test tests::submit_market_sell_order::submit_market_sell_order_with_short_position ... ok
test tests::submit_market_buy_order::submit_market_buy_order_with_short_position ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill::basecurrency_new_5_0_expects ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_with_long ... FAILED
test tests::amend::amend_limit_order_qty_with_partial_fill::basecurrency_new_4_0_expects ... ok
test tests::submit_market_sell_order::submit_market_sell_order_turnaround_long ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_with_short ... ok
test tests::submit_market_buy_order::submit_market_buy_order_turnaround_short ... ok
test tests::submit_limit_sell_order::submit_limit_sell_order_no_position ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_no_position_max ... ok

failures:

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1000000))
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(8000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(12000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(9000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(12000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(9000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(9000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(18000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(13500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(750000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2250000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2250000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6750000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(9000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4000000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(200000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(400000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(600000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(400000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1200000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(600000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1200000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(800000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1800000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(300000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(600000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(600000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(900000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1200000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1800000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(900000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_2_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1800000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_3_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2700000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_1_expects stdout ----

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(400000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_2_expects stdout ----
2025-03-10T19:11:53.980985Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981038Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981070Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(800000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_1_expects stdout ----
2025-03-10T19:11:53.981014Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981069Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(800000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_3_expects stdout ----
2025-03-10T19:11:53.980986Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981063Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981069Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(2) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981080Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(2) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1200000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_1_expects stdout ----
2025-03-10T19:11:53.981083Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981123Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_1_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1200000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_2_expects stdout ----
2025-03-10T19:11:53.981039Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981107Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981119Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1600000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_2_expects stdout ----
2025-03-10T19:11:53.981146Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981182Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981189Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_2_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2400000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_3_expects stdout ----
2025-03-10T19:11:53.981066Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981138Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981146Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(2) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981174Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(20000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(2) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2400000))

---- order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_3_expects stdout ----
2025-03-10T19:11:53.981362Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981377Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981382Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(2) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.981388Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(2000000)), remaining_quantity: BaseCurrency(Decimal(30000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(2) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_3_expects' panicked at src/order_margin.rs:291:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3600000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_2_expects stdout ----
2025-03-10T19:11:53.985794Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986097Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986109Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(5500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_2_expects stdout ----
2025-03-10T19:11:53.985525Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986021Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.986033Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(7000000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_1_expects stdout ----
2025-03-10T19:11:53.985506Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986190Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.986213Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_3_expects stdout ----
2025-03-10T19:11:53.985535Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986024Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.986035Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(10500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_2_expects stdout ----
2025-03-10T19:11:53.985483Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986227Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986380Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(11000000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_1_expects stdout ----
2025-03-10T19:11:53.985542Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986368Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.986381Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_2_expects stdout ----
2025-03-10T19:11:53.985562Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986198Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.986484Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(9000000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_3_expects stdout ----
2025-03-10T19:11:53.985580Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986141Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.986150Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(13500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_1_expects stdout ----
2025-03-10T19:11:53.985832Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986574Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.986596Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1750000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_1_expects stdout ----
2025-03-10T19:11:53.985473Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986599Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986615Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(5500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_3_expects stdout ----
2025-03-10T19:11:53.985812Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986611Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986626Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(8250000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_1_expects stdout ----
2025-03-10T19:11:53.986034Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986198Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.986286Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2250000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_1_expects stdout ----
2025-03-10T19:11:53.986772Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986805Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986818Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1100000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_3_expects stdout ----
2025-03-10T19:11:53.985499Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986028Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986039Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(16500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_1_expects stdout ----
2025-03-10T19:11:53.985775Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986135Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986146Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2750000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_2_expects stdout ----
2025-03-10T19:11:53.985990Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986540Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.986550Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(4500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_2_expects stdout ----
2025-03-10T19:11:53.985852Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986291Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.986932Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3500000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_2_expects stdout ----
2025-03-10T19:11:53.986966Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986982Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.986992Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2200000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_3_expects stdout ----
2025-03-10T19:11:53.986290Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987007Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.987021Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(6750000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_3_expects stdout ----
2025-03-10T19:11:53.985875Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.986297Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.986591Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(5250000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_3_expects stdout ----
2025-03-10T19:11:53.987111Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987140Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }
2025-03-10T19:11:53.987150Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(11000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(11000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(3300000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_2_expects stdout ----
2025-03-10T19:11:53.987135Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987159Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.987171Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1400000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_3_expects stdout ----
2025-03-10T19:11:53.987160Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987197Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.987208Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2100000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_1_expects stdout ----
2025-03-10T19:11:53.987190Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987214Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.987227Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(900000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_3_expects stdout ----
2025-03-10T19:11:53.987290Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(300000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987304Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.987314Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(150000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(150000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_3_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(2700000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_1_expects stdout ----
2025-03-10T19:11:53.987411Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987431Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }
2025-03-10T19:11:53.987440Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(7000000)), remaining_quantity: BaseCurrency(Decimal(50000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(50000)), avg_price: QuoteCurrency(Decimal(7000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_1_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(700000))

---- order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_2_expects stdout ----
2025-03-10T19:11:53.987440Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987454Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }
2025-03-10T19:11:53.987464Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Filled { cumulative_qty: BaseCurrency(Decimal(100000)), avg_price: QuoteCurrency(Decimal(9000000)) } } }] }

thread 'order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_2_expects' panicked at src/order_margin.rs:459:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(1800000))

---- order_margin::tests::order_margin_no_position stdout ----
2025-03-10T19:11:53.987675Z TRACE order_margin_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.987708Z TRACE order_margin_no_position: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(900000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.987717Z TRACE order_margin_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(900000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_no_position' panicked at src/order_margin.rs:483:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(900000))

---- order_margin::tests::order_margin_with_long stdout ----
2025-03-10T19:11:53.988814Z TRACE order_margin_with_long: lfest::position_inner: new position: qty 1.00000 Base @ 100.00000 Quote
2025-03-10T19:11:53.988846Z TRACE order_margin_with_long: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 100.00000 Quote
2025-03-10T19:11:53.988859Z TRACE order_margin_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(2000)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.988877Z TRACE order_margin_with_long: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.988890Z TRACE order_margin_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(2000)) }), active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_with_long' panicked at src/order_margin.rs:541:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(0))
 right: QuoteCurrency(Decimal(9000000))

---- tests::cancel_limit_order::cancel_limit_order stdout ----
2025-03-10T19:11:53.990694Z TRACE lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:11:53.990704Z TRACE lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:11:53.990768Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.990777Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.990869Z TRACE lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(0)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:11:53.990874Z DEBUG lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.990881Z DEBUG lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.991000Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.991007Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'tests::cancel_limit_order::cancel_limit_order' panicked at src/tests/cancel_limit_order.rs:29:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(100000000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(90000000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(10000000)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_limit_buy_order::submit_limit_buy_order_no_position stdout ----
2025-03-10T19:11:53.991279Z TRACE submit_limit_buy_order_no_position: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:11:53.991766Z TRACE submit_limit_buy_order_no_position: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 98.00000 Quote, state: NewOrder
2025-03-10T19:11:53.991777Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.992467Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.992478Z TRACE submit_limit_buy_order_no_position: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(0)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:11:53.993142Z DEBUG submit_limit_buy_order_no_position: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 98.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.993153Z DEBUG submit_limit_buy_order_no_position: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.993159Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9800000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994456Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9800000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'tests::submit_limit_buy_order::submit_limit_buy_order_no_position' panicked at src/tests/submit_limit_buy_order.rs:27:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(100000000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(51000000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(49000000)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max stdout ----
2025-03-10T19:11:53.991419Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:11:53.991802Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:11:53.991818Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.991827Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.993165Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(50000000)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:11:53.993184Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.994471Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.994480Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994489Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994517Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 500.00000 Quote
2025-03-10T19:11:53.994528Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:11:53.994542Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994550Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994557Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(50000000)), new_order_margin: QuoteCurrency(Decimal(90000000)), available_wallet_balance: QuoteCurrency(Decimal(50000000))
2025-03-10T19:11:53.994562Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.994568Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.994575Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994582Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994617Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 400.00000 Quote
2025-03-10T19:11:53.994623Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:11:53.994632Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994642Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994651Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(90000000)), new_order_margin: QuoteCurrency(Decimal(100000000)), available_wallet_balance: QuoteCurrency(Decimal(10000000))
2025-03-10T19:11:53.994658Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.994664Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.994673Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994679Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994703Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 100.00000 Quote
2025-03-10T19:11:53.994715Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: NewOrder
2025-03-10T19:11:53.994721Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994732Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994746Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(100000000)), new_order_margin: QuoteCurrency(Decimal(100000000)), available_wallet_balance: QuoteCurrency(Decimal(0))
2025-03-10T19:11:53.994751Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.994757Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.994768Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994775Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994789Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 4.00000 Base @ 99.00000 Quote, state: NewOrder
2025-03-10T19:11:53.994795Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994810Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994826Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(100000000)), new_order_margin: QuoteCurrency(Decimal(100000000)), available_wallet_balance: QuoteCurrency(Decimal(0))
2025-03-10T19:11:53.994831Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 4.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.994836Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.994848Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994854Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994885Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 2.00000 Base @ 99.00000 Quote, state: NewOrder
2025-03-10T19:11:53.994891Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994908Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:11:53.994925Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(100000000)), new_order_margin: QuoteCurrency(Decimal(100000000)), available_wallet_balance: QuoteCurrency(Decimal(0))
2025-03-10T19:11:53.994930Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 2.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.994936Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 4.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:11:53.994949Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.994955Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max' panicked at src/tests/submit_limit_sell_order.rs:172:5:
assertion `left == right` failed
  left: Ok(LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } })
 right: Err(RiskError(NotEnoughAvailableBalance))

---- tests::submit_limit_buy_order::submit_limit_buy_order_with_long stdout ----
2025-03-10T19:11:53.991480Z TRACE submit_limit_buy_order_with_long: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:11:53.992551Z TRACE submit_limit_buy_order_with_long:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(54000))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:11:53.993237Z TRACE submit_limit_buy_order_with_long:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(54000))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 900.00000 Quote
2025-03-10T19:11:53.995186Z TRACE submit_limit_buy_order_with_long: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:11:53.995208Z TRACE submit_limit_buy_order_with_long: lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:11:53.995216Z TRACE submit_limit_buy_order_with_long: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 1.10000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:11:53.995223Z TRACE submit_limit_buy_order_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(54000)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.995232Z TRACE submit_limit_buy_order_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(54000)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:11:53.995242Z TRACE submit_limit_buy_order_with_long: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(0)), available_wallet_balance: QuoteCurrency(Decimal(10000000))
2025-03-10T19:11:53.995250Z DEBUG submit_limit_buy_order_with_long: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 1.10000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:11:53.995257Z DEBUG submit_limit_buy_order_with_long: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 1, step: 2, position: Long 9.00000 Base @ 100.00000 Quote
2025-03-10T19:11:53.995267Z TRACE submit_limit_buy_order_with_long: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(110000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }
2025-03-10T19:11:53.995276Z TRACE submit_limit_buy_order_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(54000)) }), active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(110000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } }] }

thread 'tests::submit_limit_buy_order::submit_limit_buy_order_with_long' panicked at src/tests/submit_limit_buy_order.rs:256:5:
assertion `left == right` failed
  left: Ok(LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(110000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(1) }, filled_quantity: Unfilled } })
 right: Err(RiskError(NotEnoughAvailableBalance))


failures:
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_3_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_1_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_2_expects
    order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_3_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_1_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_2_expects
    order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_3_expects
    order_margin::tests::order_margin_no_position
    order_margin::tests::order_margin_with_long
    tests::cancel_limit_order::cancel_limit_order
    tests::submit_limit_buy_order::submit_limit_buy_order_no_position
    tests::submit_limit_buy_order::submit_limit_buy_order_with_long
    tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max

test result: FAILED. 579 passed; 114 failed; 4 ignored; 0 measured; 0 filtered out; finished in 0.03s

error: test failed, to rerun pass `-p lfest --lib`

*** result: Failure(101)
