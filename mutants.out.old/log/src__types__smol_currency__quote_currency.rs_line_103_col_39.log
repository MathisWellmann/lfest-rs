
*** src/types/smol_currency/quote_currency.rs:103:39: replace * with / in <impl Currency<I, D> for QuoteCurrency<I, D>>::convert_from

*** mutation diff:
--- src/types/smol_currency/quote_currency.rs
+++ replace * with / in <impl Currency<I, D> for QuoteCurrency<I, D>>::convert_from
@@ -95,17 +95,17 @@
 /// - `D`: The constant decimal precision of the `QuoteCurrency`.
 impl<I, const D: u8> Currency<I, D> for QuoteCurrency<I, D>
 where
     I: Mon<D>,
 {
     type PairedCurrency = BaseCurrency<I, D>;
 
     fn convert_from(units: Self::PairedCurrency, price_per_unit: QuoteCurrency<I, D>) -> Self {
-        QuoteCurrency(*units.as_ref() * *price_per_unit.as_ref())
+        QuoteCurrency(*units.as_ref() / /* ~ changed by cargo-mutants ~ */ *price_per_unit.as_ref())
     }
 }
 
 /// Linear futures where the `Quote` currency is used as margin currency.
 ///
 /// # Generics:
 /// - `I`: The numeric data type of `Decimal`.
 /// - `D`: The constant decimal precision.


*** /nix/store/v2d7zb1wrsn94pv0hdl4v5nj96msh0lf-cargo-1.85.0-x86_64-unknown-linux-gnu/bin/cargo test --no-run --verbose --package=lfest@0.101.0
       Fresh unicode-ident v1.0.18
       Fresh proc-macro2 v1.0.94
       Fresh quote v1.0.39
       Fresh autocfg v1.4.0
       Fresh cfg-if v1.0.0
       Fresh syn v2.0.99
       Fresh once_cell v1.20.3
       Fresh memchr v2.7.4
       Fresh regex-syntax v0.8.5
       Fresh ryu v1.0.20
       Fresh itoa v1.0.15
       Fresh regex-syntax v0.6.29
       Fresh byteorder v1.5.0
       Fresh proc-macro-error-attr2 v2.0.0
       Fresh unicode-segmentation v1.12.0
       Fresh overload v0.1.1
       Fresh log v0.4.26
       Fresh pin-project-lite v0.2.16
       Fresh lazy_static v1.5.0
       Fresh either v1.14.0
       Fresh half v2.4.1
       Fresh clap_lex v0.7.4
       Fresh plotters-backend v0.3.7
       Fresh anstyle v1.0.10
       Fresh unicode-xid v0.2.6
       Fresh smallvec v1.14.0
       Fresh ruint-macro v1.2.1
       Fresh ciborium-io v0.2.2
       Fresh diff v0.1.13
       Fresh same-file v1.0.6
       Fresh equivalent v1.0.2
       Fresh yansi v1.0.1
       Fresh cast v0.3.0
       Fresh allocator-api2 v0.2.21
       Fresh foldhash v0.1.4
       Fresh fpdec-core v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh base64 v0.21.7
       Fresh distrs v0.2.2
       Fresh glidesort v0.1.2
       Fresh oorandom v11.1.4
       Fresh anes v0.1.6
       Fresh libm v0.2.11
       Fresh serde_derive v1.0.218
       Fresh libc v0.2.170
       Fresh tracing-core v0.1.33
       Fresh zerocopy-derive v0.7.35
       Fresh regex-automata v0.4.9
       Fresh tracing-attributes v0.1.28
       Fresh thiserror-impl v1.0.69
       Fresh regex-automata v0.1.10
       Fresh csv-core v0.1.12
       Fresh nu-ansi-term v0.46.0
       Fresh proc-macro-error2 v2.0.1
       Fresh convert_case v0.7.1
       Fresh sharded-slab v0.1.7
       Fresh thread_local v1.1.8
       Fresh typed-builder-macro v0.20.0
       Fresh thiserror-impl v2.0.12
       Fresh clap_builder v4.5.31
       Fresh ciborium-ll v0.2.2
       Fresh plotters-svg v0.3.7
       Fresh itertools v0.10.5
       Fresh test-case-core v3.3.1
       Fresh ruint v1.13.1
       Fresh fpdec-macros v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh tracing-test-macro v0.2.5
       Fresh walkdir v2.5.0
       Fresh hashbrown v0.15.2
       Fresh num-traits v0.2.19
       Fresh serde v1.0.218
       Fresh semver v1.0.26
       Fresh crossbeam-utils v0.8.21
       Fresh regex v1.11.1
       Fresh zerocopy v0.7.35
       Fresh getrandom v0.3.1
       Fresh tracing v0.1.41
       Fresh is-terminal v0.4.15
       Fresh tracing-log v0.2.0
       Fresh matchers v0.1.0
       Fresh thiserror v1.0.69
       Fresh derive_more-impl v2.0.1
       Fresh getset v0.1.5
       Fresh zerocopy v0.8.21
       Fresh paste v1.0.15
       Fresh syn v1.0.109
       Fresh thiserror v2.0.12
       Fresh criterion-plot v0.5.0
       Fresh typed-builder v0.20.0
       Fresh test-case-macros v3.3.1
       Fresh clap v4.5.31
       Fresh num-integer v0.1.46
       Fresh rustc_version v0.4.1
       Fresh crossbeam-epoch v0.9.18
       Fresh ppv-lite86 v0.2.20
       Fresh num-complex v0.4.6
       Fresh rand_core v0.9.3
       Fresh serde_json v1.0.140
       Fresh tracing-subscriber v0.3.19
       Fresh csv v1.3.1
       Fresh bitflags v2.9.0
       Fresh const-decimal v0.3.0 (https://github.com/OliverNChalk/const-decimal#7bf77bf3)
       Fresh derive_more v2.0.1
       Fresh trade_aggregation_derive v0.4.1
       Fresh plotters v0.3.7
       Fresh ciborium v0.2.2
       Fresh test-case v3.3.1
       Fresh fpdec v0.10.3 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh num-bigint v0.4.6
       Fresh num-iter v0.1.45
       Fresh crossbeam-deque v0.8.6
       Fresh rand_chacha v0.9.0
       Fresh tinytemplate v1.2.1
       Fresh tracing-test v0.2.5
       Fresh ron v0.8.1
       Fresh trade_aggregation v12.0.3
       Fresh num-rational v0.4.2
       Fresh rayon-core v1.12.1
       Fresh rand v0.9.0
       Fresh num v0.4.3
       Fresh assert2-macros v0.3.15
       Fresh rayon v1.10.0
       Fresh rand_distr v0.5.1
       Fresh sliding_features v6.0.0
       Fresh assert2 v0.3.15
       Fresh criterion v0.5.1
       Dirty lfest v0.101.0 (/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp): the file `src/types/smol_currency/quote_currency.rs` has changed (1741633932.055602603s, 3s after last build at 1741633929.744609965s)
   Compiling lfest v0.101.0 (/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp)
     Running `rustc --crate-name lfest --edition=2024 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=e38c20648c8acf1a -C extra-filename=-6c98b9dad13cebfc --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name lfest --edition=2024 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=42acac75bcd4402d -C extra-filename=-8d41768972dbddc8 --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rmeta --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rmeta --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rmeta --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rmeta --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rmeta --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rmeta --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rmeta --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rmeta --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rmeta --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rmeta --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rmeta --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rmeta --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rmeta --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rmeta --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rmeta`
     Running `rustc --crate-name limit_orders_only --edition=2024 tests/limit_orders_only.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=c92fd88983cdfcdc -C extra-filename=-f59f525f5df1c0dc --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name basic --edition=2024 examples/basic.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=52fb7e4642438df9 -C extra-filename=-d3682d3003820b95 --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/examples -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name linear_futures --edition=2024 tests/linear_futures.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=d9b24d852be96abf -C extra-filename=-e52de928d03eefdc --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
     Running `rustc --crate-name inverse_futures --edition=2024 tests/inverse_futures.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --test --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("trade_aggregation"))' -C metadata=627ceed5ef226dc6 -C extra-filename=-6ef206ebf42eea73 --out-dir /tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps -C incremental=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/incremental -L dependency=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps --extern assert2=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libassert2-a7bd1c0d8f717890.rlib --extern const_decimal=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libconst_decimal-b153bca3f2fcb585.rlib --extern criterion=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcriterion-eec0979d205b9cc9.rlib --extern csv=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libcsv-a40249ca683bf805.rlib --extern derive_more=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libderive_more-d76303e21eab48a4.rlib --extern distrs=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libdistrs-8771fe8f881fe8c1.rlib --extern fpdec=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libfpdec-9d463e9e5511bd95.rlib --extern getset=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libgetset-5a480600d0309d86.so --extern glidesort=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libglidesort-989a09811d2f10b2.rlib --extern hashbrown=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libhashbrown-1d413cc121139f6c.rlib --extern lfest=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/liblfest-8d41768972dbddc8.rlib --extern num=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum-c60a9b679bcfa6bb.rlib --extern num_traits=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libnum_traits-7e302e7a7d80539f.rlib --extern rand=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand-9db6aec50dbd5ab8.rlib --extern rand_distr=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/librand_distr-06e089842759846e.rlib --extern ron=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libron-cf7ab77f1cd332e4.rlib --extern serde=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libserde-4f2b30cd8c281e5c.rlib --extern sliding_features=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libsliding_features-d0bd92c47917e003.rlib --extern test_case=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtest_case-f45e9dc1fc82aa7c.rlib --extern thiserror=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libthiserror-4ec24f5246b6b2d6.rlib --extern tracing=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing-b303b594fc287ce4.rlib --extern tracing_subscriber=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_subscriber-2dcbd82461397adf.rlib --extern tracing_test=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtracing_test-356597c5cf4fbd5e.rlib --extern trade_aggregation=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtrade_aggregation-5d6c2a4b8e491a04.rlib --extern typed_builder=/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/libtyped_builder-51b8e60a6e40978c.rlib`
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.11s
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/lfest-6c98b9dad13cebfc`
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/inverse_futures-6ef206ebf42eea73`
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/limit_orders_only-f59f525f5df1c0dc`
  Executable `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/linear_futures-e52de928d03eefdc`

*** result: Success

*** /nix/store/v2d7zb1wrsn94pv0hdl4v5nj96msh0lf-cargo-1.85.0-x86_64-unknown-linux-gnu/bin/cargo test --verbose --package=lfest@0.101.0
       Fresh unicode-ident v1.0.18
       Fresh proc-macro2 v1.0.94
       Fresh quote v1.0.39
       Fresh syn v2.0.99
       Fresh cfg-if v1.0.0
       Fresh autocfg v1.4.0
       Fresh serde_derive v1.0.218
       Fresh once_cell v1.20.3
       Fresh memchr v2.7.4
       Fresh ryu v1.0.20
       Fresh regex-syntax v0.8.5
       Fresh itoa v1.0.15
       Fresh regex-automata v0.4.9
       Fresh tracing-core v0.1.33
       Fresh zerocopy-derive v0.7.35
       Fresh byteorder v1.5.0
       Fresh regex-syntax v0.6.29
       Fresh tracing-attributes v0.1.28
       Fresh thiserror-impl v1.0.69
       Fresh proc-macro-error-attr2 v2.0.0
       Fresh pin-project-lite v0.2.16
       Fresh either v1.14.0
       Fresh unicode-segmentation v1.12.0
       Fresh overload v0.1.1
       Fresh lazy_static v1.5.0
       Fresh log v0.4.26
       Fresh thread_local v1.1.8
       Fresh csv-core v0.1.12
       Fresh half v2.4.1
       Fresh plotters-backend v0.3.7
       Fresh ciborium-io v0.2.2
       Fresh ruint-macro v1.2.1
       Fresh smallvec v1.14.0
       Fresh unicode-xid v0.2.6
       Fresh clap_lex v0.7.4
       Fresh anstyle v1.0.10
       Fresh test-case-core v3.3.1
       Fresh typed-builder-macro v0.20.0
       Fresh thiserror-impl v2.0.12
       Fresh foldhash v0.1.4
       Fresh cast v0.3.0
       Fresh equivalent v1.0.2
       Fresh same-file v1.0.6
       Fresh fpdec-core v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh allocator-api2 v0.2.21
       Fresh yansi v1.0.1
       Fresh diff v0.1.13
       Fresh tracing-test-macro v0.2.5
       Fresh anes v0.1.6
       Fresh glidesort v0.1.2
       Fresh distrs v0.2.2
       Fresh base64 v0.21.7
       Fresh oorandom v11.1.4
       Fresh libm v0.2.11
       Fresh serde v1.0.218
       Fresh libc v0.2.170
       Fresh semver v1.0.26
       Fresh crossbeam-utils v0.8.21
       Fresh zerocopy v0.7.35
       Fresh regex-automata v0.1.10
       Fresh regex v1.11.1
       Fresh tracing v0.1.41
       Fresh tracing-log v0.2.0
       Fresh sharded-slab v0.1.7
       Fresh convert_case v0.7.1
       Fresh nu-ansi-term v0.46.0
       Fresh proc-macro-error2 v2.0.1
       Fresh ruint v1.13.1
       Fresh clap_builder v4.5.31
       Fresh ciborium-ll v0.2.2
       Fresh itertools v0.10.5
       Fresh plotters-svg v0.3.7
       Fresh walkdir v2.5.0
       Fresh typed-builder v0.20.0
       Fresh fpdec-macros v0.8.0 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh hashbrown v0.15.2
       Fresh test-case-macros v3.3.1
       Fresh num-traits v0.2.19
       Fresh rustc_version v0.4.1
       Fresh crossbeam-epoch v0.9.18
       Fresh getrandom v0.3.1
       Fresh matchers v0.1.0
       Fresh is-terminal v0.4.15
       Fresh thiserror v1.0.69
       Fresh ppv-lite86 v0.2.20
       Fresh derive_more-impl v2.0.1
       Fresh serde_json v1.0.140
       Fresh zerocopy v0.8.21
       Fresh syn v1.0.109
       Fresh csv v1.3.1
       Fresh getset v0.1.5
       Fresh paste v1.0.15
       Fresh thiserror v2.0.12
       Fresh clap v4.5.31
       Fresh criterion-plot v0.5.0
       Fresh bitflags v2.9.0
       Fresh ciborium v0.2.2
       Fresh test-case v3.3.1
       Fresh num-integer v0.1.46
       Fresh crossbeam-deque v0.8.6
       Fresh num-complex v0.4.6
       Fresh rand_core v0.9.3
       Fresh tracing-subscriber v0.3.19
       Fresh const-decimal v0.3.0 (https://github.com/OliverNChalk/const-decimal#7bf77bf3)
       Fresh plotters v0.3.7
       Fresh trade_aggregation_derive v0.4.1
       Fresh derive_more v2.0.1
       Fresh tinytemplate v1.2.1
       Fresh fpdec v0.10.3 (https://github.com/MathisWellmann/fpdec.rs?rev=40cf802#40cf8025)
       Fresh ron v0.8.1
       Fresh num-bigint v0.4.6
       Fresh num-iter v0.1.45
       Fresh rayon-core v1.12.1
       Fresh rand_chacha v0.9.0
       Fresh trade_aggregation v12.0.3
       Fresh tracing-test v0.2.5
       Fresh num-rational v0.4.2
       Fresh assert2-macros v0.3.15
       Fresh rayon v1.10.0
       Fresh rand v0.9.0
       Fresh num v0.4.3
       Fresh assert2 v0.3.15
       Fresh rand_distr v0.5.1
       Fresh criterion v0.5.1
       Fresh sliding_features v6.0.0
       Fresh lfest v0.101.0 (/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.10s
     Running `/tmp/nix-shell.lQc7sB/cargo-mutants-lfest-rs-p4kTZr.tmp/target/debug/deps/lfest-6c98b9dad13cebfc`

running 697 tests
test active_limit_orders::tests::active_limit_orders ... ok
test market_update::bba_update::tests::size_of_bba ... ok
test active_limit_orders::tests::size_of_optional_reference ... ok
test market_update::smart_candle::tests::size_of_smart_candle ... ok
test market_update::candle_update::test::candle_update ... ok
test market_update::smart_candle::tests::smart_candle_buy_side ... ok
test market_update::smart_candle::tests::smart_candle_execute_limit_order ... ok
test market_update::smart_candle::tests::smart_candle_no_sells ... ok
test market_update::smart_candle::tests::smart_candle_sell_side ... ok
test market_update::smart_candle::tests::smart_candle_simple ... ok
test market_update::smart_candle::tests::smart_candle_no_buys ... ok
test market_update::trade_update::tests::size_of_trade ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_100_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_110_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_none::_120_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_100_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_110_3_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_1_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_1_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_2_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_2_side_sell_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_3_side_buy_expects ... ok
test market_update::trade_update::tests::trade_limit_order_filled_some::_120_3_side_sell_expects ... ok
test order_filters::price_filter::tests::size_of_price_filter ... ok
test order_filters::price_filter::tests::price_filter ... ok
test order_filters::quantity_filter::tests::quantity_filter ... ok
test order_filters::quantity_filter::tests::quantity_filter_2 ... ok
test order_filters::quantity_filter::tests::size_of_quantity_filter ... ok
test order_margin::tests::order_margin_long_no_orders::_1_1_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_1_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_1_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_2_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_2_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_2_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_5_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_5_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_1_5_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_1_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_1_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_1_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_2_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_2_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_2_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_5_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_5_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_2_5_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_1_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_1_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_1_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_2_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_2_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_2_300_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_5_100_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_5_200_expects ... ok
test order_margin::tests::order_margin_long_no_orders::_5_5_300_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_buy_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_1_side_sell_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_1_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_3_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_2_85_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_3_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_1_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_2_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_70_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_3_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_70_2_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_sell_90_3_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_2_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_3_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_3_125_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_90_2_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_110_1_100_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_buy_90_1_85_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_5_side_sell_70_3_100_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_long_orders_of_same_qty::_2_side_buy_70_1_125_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_2_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_5_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_opposite_side::_1_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_no_orders::_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_no_orders::_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_1_side_sell_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_no_orders::_5_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_2_side_sell_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_buy_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_100_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_1_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_150_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_1_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_1_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_2_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_2_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_2_3_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_3_1_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_3_2_expects ... ok
test order_margin::tests::order_margin_neutral_orders_of_same_side::_5_side_sell_200_3_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_buy_90_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_1_side_sell_90_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_buy_90_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_90_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_2_side_sell_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_70_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_2_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_buy_90_3_expects ... ok
test position::tests::position_change_position_2 ... ignored
test position_inner::tests::position_inner_decrease_contracts_inverse::_1_expects ... ignored
test position_inner::tests::position_inner_decrease_contracts_inverse::_2_expects ... ignored
test position_inner::tests::position_inner_decrease_contracts_inverse::_5_expects ... ignored
test position_inner::tests::position_inner_increase_contracts::_1_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_110_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_70_1_expects ... ok
test position_inner::tests::position_inner_increase_contracts::_2_expects ... FAILED
test position_inner::tests::position_inner_new::_2_expects ... FAILED
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_110_2_expects ... ok
test position_inner::tests::position_inner_new::_5_expects ... FAILED
test position_inner::tests::position_inner_increase_contracts::_5_expects ... FAILED
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_long::_2_75_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_long::_3_84_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_110_1_expects ... ok
test position_inner::tests::position_inner_new::_1_expects ... FAILED
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_short::_2_126_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_70_3_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_70_2_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_short::_3_117_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_quantity_minus_position ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_short::_5_111_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_90_1_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_90_2_expects ... ok
test risk_engine::isolated_margin::tests::isolated_margin_check_maintenance_margin_long::_5_90_expects ... ok
test order_margin::tests::order_margin_neutral_update_partial_fills::_5_side_sell_90_3_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_3_0_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_1_100_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_1_0_expects ... ok
test tests::amend::amend_limit_order_qty::basecurrency_new_5_0_expects ... ok
test order_margin::tests::order_margin_no_position ... FAILED
test tests::amend::amend_limit_order_qty::basecurrency_new_10_0_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_1_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_2_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_2_200_expects ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill_leading_to_cancel::basecurrency_new_1_0_expects ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill::basecurrency_new_4_0_expects ... ok
test order_rate_limiter::tests::order_rate_limiter ... ok
test position::tests::size_of_position ... ok
test tests::partial_order_fill::partial_limit_order_fill::with_buy_order ... ok
test order_margin::tests::order_margin_short_no_orders::_1_5_300_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_9_expects ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_above_ask ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_turnaround_short ... ok
test order_margin::tests::order_margin_short_no_orders::_1_1_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_2_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_5_100_expects ... ok
test tests::submit_market_buy_order::submit_market_buy_order_reject ... FAILED
test order_margin::tests::order_margin_short_no_orders::_2_5_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_2_200_expects ... ok
test tests::submit_market_sell_order::submit_market_sell_order ... FAILED
test tests::submit_limit_sell_order::submit_limit_sell_order_below_bid ... ok
test types::fee::tests::size_of_fee ... ok
test tests::submit_limit_sell_order::submit_limit_sell_order_turnaround_long ... ok
test types::leverage::tests::leverage ... ok
test order_margin::tests::order_margin_short_no_orders::_5_1_200_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_100_1_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_100_2_expects ... ok
test types::leverage::tests::leverage_init_margin_req ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_110_1_expects ... ok
test types::leverage::tests::size_of_leverage ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_110_2_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_5_300_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_120_3_expects ... ok
test tests::submit_market_sell_order::submit_market_sell_order_with_short_position ... FAILED
test types::limit_order::tests::limit_order_fill_full::side_sell_100_2_expects ... ok
test order_margin::tests::order_margin_with_long ... FAILED
test types::limit_order::tests::limit_order_fill_full::side_buy_110_3_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_5_200_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_5_100_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_110_1_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_buy_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_110_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_100_1_expects ... ok
test tests::submit_market_buy_order::submit_market_buy_order_no_position ... FAILED
test types::limit_order::tests::limit_order_fill_full::side_sell_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_100_1_expects ... ok
test position::tests::position_change_position ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_110_1_expects ... ok
test order_margin::tests::order_margin_with_short ... FAILED
test types::limit_order::tests::limit_order_fill_full::side_sell_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_110_3_expects ... ok
test types::limit_order::tests::limit_order_fill_full::side_sell_120_3_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_1_side_sell_expects ... FAILED
test position_inner::tests::position_inner_decrease_contracts_2::_2_side_sell_expects ... FAILED
test position_inner::tests::position_inner_decrease_contracts_2::_2_side_buy_expects ... FAILED
test types::limit_order::tests::limit_order_fill_partial::side_buy_100_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_120_3_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_2::_5_side_sell_expects ... FAILED
test position_inner::tests::position_inner_decrease_contracts_basic::_1_expects ... FAILED
test position_inner::tests::position_inner_decrease_contracts_2::_1_side_buy_expects ... FAILED
test types::limit_order::tests::limit_order_fill_partial::side_buy_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_100_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_100_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_100_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_110_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_110_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_110_3_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_120_1_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_120_2_expects ... ok
test types::limit_order::tests::limit_order_fill_partial::side_sell_120_3_expects ... ok
test types::limit_order::tests::size_of_limit_order ... ok
test types::side::tests::side_from_taker_quantity ... ok
test types::side::tests::side_from_taker_quantity_panic - should panic ... ok
test types::limit_order::tests::limit_order_fill_partial::side_buy_120_1_expects ... ok
test types::smol_currency::tests::quote_currency_pnl ... FAILED
test position_inner::tests::position_inner_decrease_contracts_win::_5_side_buy_expects ... FAILED
test types::smol_currency::tests::base_currency_pnl ... ok
test types::smol_currency::tests::convert_quote_to_base ... ok
test utils::tests::test_decimal_from_f64 ... ok
test types::smol_currency::tests::convert_base_to_quote ... FAILED
test utils::tests::test_convert_decimals ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_2_side_buy_expects ... FAILED
test position_inner::tests::position_inner_entry_price_inverse::_90_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_5_side_sell_expects ... FAILED
test position_inner::tests::position_inner_entry_price_inverse::_50_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_1_expects ... ok
test position_inner::tests::position_inner_entry_price_inverse::_20_expects ... ok
test tests::partial_order_fill::partial_limit_order_fill::with_sell_order ... ok
test order_margin::tests::order_margin_short_no_orders::_2_1_100_expects ... ok
test tests::submit_market_buy_order::submit_market_buy_order_with_long_position ... FAILED
test order_margin::tests::order_margin_short_no_orders::_2_2_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_2_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_1_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_5_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_1_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_2_100_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_5_2_300_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_basic::_5_expects ... FAILED
test position_inner::tests::position_inner_decrease_contracts_basic::_2_expects ... FAILED
test position_inner::tests::position_inner_entry_price_inverse::_10_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_1_side_sell_expects ... FAILED
test tests::submit_market_sell_order::submit_market_sell_order_with_long_position ... FAILED
test position_inner::tests::position_inner_entry_price_linear::_5_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_1_5_200_expects ... ok
test position_inner::tests::position_inner_decrease_contracts_win::_2_side_sell_expects ... FAILED
test order_margin::tests::order_margin_short_no_orders::_2_1_200_expects ... ok
test tests::cancel_limit_order::cancel_limit_order ... FAILED
test order_margin::tests::order_margin_short_no_orders::_2_1_300_expects ... ok
test order_margin::tests::order_margin_short_no_orders::_2_5_200_expects ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_with_long ... FAILED
test order_margin::tests::order_margin_short_no_orders::_5_2_200_expects ... ok
test position_inner::tests::position_inner_entry_price_linear::_2_expects ... ok
test tests::submit_market_buy_order::submit_market_buy_order_turnaround_short ... FAILED
test tests::submit_market_buy_order::submit_market_buy_order_with_short_position ... FAILED
test tests::submit_limit_sell_order::submit_limit_sell_order_no_position ... FAILED
test tests::submit_market_sell_order::submit_market_sell_order_reject ... FAILED
test tests::submit_market_sell_order::submit_market_sell_order_turnaround_long ... FAILED
test tests::amend::amend_limit_order_qty_with_partial_fill::basecurrency_new_6_0_expects ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_no_position ... FAILED
test position_inner::tests::position_inner_decrease_contracts_2::_5_side_buy_expects ... FAILED
test tests::submit_limit_buy_order::submit_limit_buy_order_with_short ... FAILED
test position_inner::tests::position_inner_decrease_contracts_win::_1_side_buy_expects ... FAILED
test tests::amend::amend_limit_order_qty_with_partial_fill_leading_to_cancel::basecurrency_new_3_0_expects ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill_leading_to_cancel::basecurrency_new_2_0_expects ... ok
test tests::amend::amend_limit_order_qty_with_partial_fill::basecurrency_new_5_0_expects ... ok
test tests::submit_limit_buy_order::submit_limit_buy_order_no_position_max ... FAILED
test tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max ... FAILED

failures:

---- position_inner::tests::position_inner_increase_contracts::_1_expects stdout ----
2025-03-10T19:12:14.378103Z TRACE lfest::position_inner: new position: qty 0.50000 Base @ 100.00000 Quote
2025-03-10T19:12:14.378154Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00500 Quote
2025-03-10T19:12:14.378173Z DEBUG lfest::position_inner: increase_contracts: qty: 0.50000 Base @ 150.00000 Quote; self: PositionInner( quantity: 0.50000 Base, outstanding_fees: 0.00000 Quote)
2025-03-10T19:12:14.378213Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00333 Quote

thread 'position_inner::tests::position_inner_increase_contracts::_1_expects' panicked at src/position_inner.rs:288:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(833))
 right: QuoteCurrency(Decimal(12500000))
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- position_inner::tests::position_inner_increase_contracts::_2_expects stdout ----
2025-03-10T19:12:14.378137Z TRACE lfest::position_inner: new position: qty 0.50000 Base @ 100.00000 Quote
2025-03-10T19:12:14.378228Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00250 Quote
2025-03-10T19:12:14.378239Z DEBUG lfest::position_inner: increase_contracts: qty: 0.50000 Base @ 150.00000 Quote; self: PositionInner( quantity: 0.50000 Base, outstanding_fees: 0.00000 Quote)
2025-03-10T19:12:14.378371Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00166 Quote

thread 'position_inner::tests::position_inner_increase_contracts::_2_expects' panicked at src/position_inner.rs:288:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(416))
 right: QuoteCurrency(Decimal(6250000))

---- position_inner::tests::position_inner_new::_2_expects stdout ----
2025-03-10T19:12:14.378236Z TRACE lfest::position_inner: new position: qty 0.50000 Base @ 100.00000 Quote
2025-03-10T19:12:14.378357Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00250 Quote

thread 'position_inner::tests::position_inner_new::_2_expects' panicked at src/position_inner.rs:257:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(250))
 right: QuoteCurrency(Decimal(2500000))

---- position_inner::tests::position_inner_new::_5_expects stdout ----
2025-03-10T19:12:14.378273Z TRACE lfest::position_inner: new position: qty 0.50000 Base @ 100.00000 Quote
2025-03-10T19:12:14.378421Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00100 Quote

thread 'position_inner::tests::position_inner_new::_5_expects' panicked at src/position_inner.rs:257:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(100))
 right: QuoteCurrency(Decimal(1000000))

---- position_inner::tests::position_inner_increase_contracts::_5_expects stdout ----
2025-03-10T19:12:14.378181Z TRACE lfest::position_inner: new position: qty 0.50000 Base @ 100.00000 Quote
2025-03-10T19:12:14.378341Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00100 Quote
2025-03-10T19:12:14.378360Z DEBUG lfest::position_inner: increase_contracts: qty: 0.50000 Base @ 150.00000 Quote; self: PositionInner( quantity: 0.50000 Base, outstanding_fees: 0.00000 Quote)
2025-03-10T19:12:14.378396Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00066 Quote

thread 'position_inner::tests::position_inner_increase_contracts::_5_expects' panicked at src/position_inner.rs:288:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(166))
 right: QuoteCurrency(Decimal(2500000))

---- position_inner::tests::position_inner_new::_1_expects stdout ----
2025-03-10T19:12:14.378217Z TRACE lfest::position_inner: new position: qty 0.50000 Base @ 100.00000 Quote
2025-03-10T19:12:14.378342Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00500 Quote

thread 'position_inner::tests::position_inner_new::_1_expects' panicked at src/position_inner.rs:257:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(500))
 right: QuoteCurrency(Decimal(5000000))

---- order_margin::tests::order_margin_no_position stdout ----
2025-03-10T19:12:14.378954Z TRACE order_margin_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.379063Z TRACE order_margin_no_position: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(900000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.379075Z TRACE order_margin_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(900000)), remaining_quantity: BaseCurrency(Decimal(10000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_no_position' panicked at src/order_margin.rs:483:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(111))
 right: QuoteCurrency(Decimal(900000))

---- tests::submit_market_buy_order::submit_market_buy_order_reject stdout ----
2025-03-10T19:12:14.381173Z TRACE submit_market_buy_order_reject: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381241Z TRACE submit_market_buy_order_reject:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(1000000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(6))}: lfest::position_inner: new position: qty 10.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.381340Z TRACE submit_market_buy_order_reject:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(1000000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(6))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.10000 Quote

thread 'tests::submit_market_buy_order::submit_market_buy_order_reject' panicked at src/tests/submit_market_buy_order.rs:21:5:
assertion `left == right` failed
  left: Ok(MarketOrder { user_order_id: NoUserOrderId, side: Buy, quantity: BaseCurrency(Decimal(1000000)), state: Filled { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, ts_ns_executed: TimestampNs(0), avg_fill_price: QuoteCurrency(Decimal(10000000)), filled_qty: BaseCurrency(Decimal(1000000)) }, _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> })
 right: Err(RiskError(NotEnoughAvailableBalance))

---- tests::submit_market_sell_order::submit_market_sell_order stdout ----
2025-03-10T19:12:14.381253Z TRACE lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.381351Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(3))}: lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.381417Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(3))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.381458Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote

thread 'tests::submit_market_sell_order::submit_market_sell_order' panicked at src/tests/submit_market_sell_order.rs:58:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99995000)), position_margin: QuoteCurrency(Decimal(5000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(50000000)), position_margin: QuoteCurrency(Decimal(50000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_market_sell_order::submit_market_sell_order_with_short_position stdout ----
2025-03-10T19:12:14.381514Z TRACE lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.381617Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(3))}: lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.381871Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(3))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote

thread 'tests::submit_market_sell_order::submit_market_sell_order_with_short_position' panicked at src/tests/submit_market_sell_order.rs:92:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99995000)), position_margin: QuoteCurrency(Decimal(5000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(50000000)), position_margin: QuoteCurrency(Decimal(50000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- order_margin::tests::order_margin_with_long stdout ----
2025-03-10T19:12:14.380140Z TRACE order_margin_with_long: lfest::position_inner: new position: qty 1.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382033Z TRACE order_margin_with_long: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.382046Z TRACE order_margin_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(0)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.382056Z TRACE order_margin_with_long: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.382067Z TRACE order_margin_with_long: lfest::order_margin: order_margin_internal: position: Long(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(0)) }), active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'order_margin::tests::order_margin_with_long' panicked at src/order_margin.rs:541:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(1111))
 right: QuoteCurrency(Decimal(9000000))

---- tests::submit_market_buy_order::submit_market_buy_order_no_position stdout ----
2025-03-10T19:12:14.381909Z TRACE submit_market_buy_order_no_position: lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.381972Z TRACE submit_market_buy_order_no_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10100000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(2))}: lfest::position_inner: new position: qty 5.00000 Base @ 101.00000 Quote
2025-03-10T19:12:14.382308Z TRACE submit_market_buy_order_no_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10100000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(2))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.04950 Quote
2025-03-10T19:12:14.382322Z TRACE submit_market_buy_order_no_position: lfest::position_inner: new position: qty 5.00000 Base @ 101.00000 Quote

thread 'tests::submit_market_buy_order::submit_market_buy_order_no_position' panicked at src/tests/submit_market_buy_order.rs:58:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99995050)), position_margin: QuoteCurrency(Decimal(4950)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(49500000)), position_margin: QuoteCurrency(Decimal(50500000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- order_margin::tests::order_margin_with_short stdout ----
2025-03-10T19:12:14.380189Z TRACE order_margin_with_short: lfest::position_inner: new position: qty 1.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382191Z TRACE order_margin_with_short: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.382206Z TRACE order_margin_with_short: lfest::order_margin: order_margin_internal: position: Short(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(0)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.382215Z TRACE order_margin_with_short: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.382226Z TRACE order_margin_with_short: lfest::order_margin: order_margin_internal: position: Short(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(0)) }), active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.382241Z TRACE order_margin_with_short: lfest::order_margin: buys order_qty: 1.00000 Base, outstanding_pos_qty: 1.00000 Base new_qty: 0.00000 Base
2025-03-10T19:12:14.382248Z TRACE order_margin_with_short: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.382255Z TRACE order_margin_with_short: lfest::order_margin: order_margin_internal: position: Short(PositionInner { quantity: BaseCurrency(Decimal(100000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(0)) }), active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.382271Z TRACE order_margin_with_short: lfest::order_margin: buys order_qty: 1.00000 Base, outstanding_pos_qty: 1.00000 Base new_qty: 0.00000 Base

thread 'order_margin::tests::order_margin_with_short' panicked at src/order_margin.rs:617:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(1000))
 right: QuoteCurrency(Decimal(10000000))

---- position_inner::tests::position_inner_decrease_contracts_2::_1_side_sell_expects stdout ----
2025-03-10T19:12:14.380319Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382514Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.382527Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 90.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.382540Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: TREASURY_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00277 Quote
2025-03-10T19:12:14.382553Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.382625Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_2::_1_side_sell_expects' panicked at src/position_inner.rs:431:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- position_inner::tests::position_inner_decrease_contracts_2::_2_side_sell_expects stdout ----
2025-03-10T19:12:14.380350Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382553Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.382636Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 90.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.382652Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: TREASURY_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00277 Quote
2025-03-10T19:12:14.382665Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.01250 Quote
2025-03-10T19:12:14.382678Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_2::_2_side_sell_expects' panicked at src/position_inner.rs:431:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- position_inner::tests::position_inner_decrease_contracts_2::_2_side_buy_expects stdout ----
2025-03-10T19:12:14.380333Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382632Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.382643Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 90.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.382655Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00277 Quote
2025-03-10T19:12:14.382671Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.01250 Quote
2025-03-10T19:12:14.382682Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_2::_2_side_buy_expects' panicked at src/position_inner.rs:431:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- position_inner::tests::position_inner_decrease_contracts_2::_5_side_sell_expects stdout ----
2025-03-10T19:12:14.380374Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382612Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.382754Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 90.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.382767Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: TREASURY_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00277 Quote
2025-03-10T19:12:14.382778Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.00500 Quote
2025-03-10T19:12:14.382790Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_2::_5_side_sell_expects' panicked at src/position_inner.rs:431:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- position_inner::tests::position_inner_decrease_contracts_basic::_1_expects stdout ----
2025-03-10T19:12:14.380399Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382760Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.382772Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 100.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.382794Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.382806Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_basic::_1_expects' panicked at src/position_inner.rs:324:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- position_inner::tests::position_inner_decrease_contracts_2::_1_side_buy_expects stdout ----
2025-03-10T19:12:14.380294Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382425Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.382442Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 90.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.382462Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00277 Quote
2025-03-10T19:12:14.382477Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.382568Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_2::_1_side_buy_expects' panicked at src/position_inner.rs:431:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- types::smol_currency::tests::quote_currency_pnl stdout ----

thread 'types::smol_currency::tests::quote_currency_pnl' panicked at src/types/smol_currency/mod.rs:91:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(-46))
 right: QuoteCurrency(Decimal(500000))

---- position_inner::tests::position_inner_decrease_contracts_win::_5_side_buy_expects stdout ----
2025-03-10T19:12:14.380513Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.383318Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.383336Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 110.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.383349Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: TREASURY_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00228 Quote
2025-03-10T19:12:14.383362Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.00500 Quote
2025-03-10T19:12:14.383378Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_win::_5_side_buy_expects' panicked at src/position_inner.rs:388:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- types::smol_currency::tests::convert_base_to_quote stdout ----

thread 'types::smol_currency::tests::convert_base_to_quote' panicked at src/types/smol_currency/mod.rs:69:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(50))
 right: QuoteCurrency(Decimal(500000))

---- position_inner::tests::position_inner_decrease_contracts_win::_2_side_buy_expects stdout ----
2025-03-10T19:12:14.380480Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.383261Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.383413Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 110.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.383429Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: TREASURY_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00228 Quote
2025-03-10T19:12:14.383443Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.01250 Quote
2025-03-10T19:12:14.383455Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_win::_2_side_buy_expects' panicked at src/position_inner.rs:388:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- position_inner::tests::position_inner_decrease_contracts_win::_5_side_sell_expects stdout ----
2025-03-10T19:12:14.380518Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.383526Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.383543Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 110.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.383558Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00228 Quote
2025-03-10T19:12:14.383569Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.00500 Quote
2025-03-10T19:12:14.383581Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_win::_5_side_sell_expects' panicked at src/position_inner.rs:388:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- tests::submit_market_buy_order::submit_market_buy_order_with_long_position stdout ----
2025-03-10T19:12:14.381221Z TRACE submit_market_buy_order_with_long_position: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381311Z TRACE submit_market_buy_order_with_long_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(3))}: lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.381349Z TRACE submit_market_buy_order_with_long_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(500000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(3))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.381371Z TRACE submit_market_buy_order_with_long_position: lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote

thread 'tests::submit_market_buy_order::submit_market_buy_order_with_long_position' panicked at src/tests/submit_market_buy_order.rs:96:5:
assertion `left == right` failed
  left: Long(PositionInner { quantity: BaseCurrency(Decimal(500000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(3)) })
 right: Long(PositionInner { quantity: BaseCurrency(Decimal(500000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(30000)) })

---- position_inner::tests::position_inner_decrease_contracts_basic::_5_expects stdout ----
2025-03-10T19:12:14.380430Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.384301Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.384317Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 100.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.384338Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.00500 Quote
2025-03-10T19:12:14.384350Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_basic::_5_expects' panicked at src/position_inner.rs:324:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(500))
 right: QuoteCurrency(Decimal(5000000))

---- position_inner::tests::position_inner_decrease_contracts_basic::_2_expects stdout ----
2025-03-10T19:12:14.380415Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382853Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.383166Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 100.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.383309Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.01250 Quote
2025-03-10T19:12:14.383321Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_basic::_2_expects' panicked at src/position_inner.rs:324:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(1250))
 right: QuoteCurrency(Decimal(12500000))

---- position_inner::tests::position_inner_decrease_contracts_win::_1_side_sell_expects stdout ----
2025-03-10T19:12:14.380467Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.383236Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.383252Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 110.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.383267Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00228 Quote
2025-03-10T19:12:14.383284Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.383298Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_win::_1_side_sell_expects' panicked at src/position_inner.rs:388:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- tests::submit_market_sell_order::submit_market_sell_order_with_long_position stdout ----
2025-03-10T19:12:14.381488Z TRACE lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381534Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.381695Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.384347Z DEBUG change_position{self=Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(5)) }) filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(9900000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(9000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(9000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: decrease_contracts: qty: 9.00000 Base @ 99.00000 Quote; self: PositionInner( quantity: 9.00000 Base, outstanding_fees: 0.00005 Quote)
2025-03-10T19:12:14.384616Z TRACE change_position{self=Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(5)) }) filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(9900000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(9000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(9000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00090 Quote
2025-03-10T19:12:14.384649Z TRACE change_position{self=Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(5)) }) filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(9900000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(9000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(9000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.384673Z TRACE change_position{self=Long(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(5)) }) filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(9900000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(9000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(9000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00010 Quote

thread 'tests::submit_market_sell_order::submit_market_sell_order_with_long_position' panicked at src/tests/submit_market_sell_order.rs:162:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(100000080)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(98992540)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- position_inner::tests::position_inner_decrease_contracts_win::_2_side_sell_expects stdout ----
2025-03-10T19:12:14.380491Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.383626Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.383638Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 110.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.384634Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00228 Quote
2025-03-10T19:12:14.384651Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.01250 Quote
2025-03-10T19:12:14.384833Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_win::_2_side_sell_expects' panicked at src/position_inner.rs:388:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- tests::cancel_limit_order::cancel_limit_order stdout ----
2025-03-10T19:12:14.379282Z TRACE lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.379332Z TRACE lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.379354Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.379375Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.379387Z TRACE lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(1000)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:12:14.379398Z DEBUG lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.379421Z DEBUG lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.379432Z TRACE lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.381331Z TRACE lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.383894Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote

thread 'tests::cancel_limit_order::cancel_limit_order' panicked at src/tests/cancel_limit_order.rs:29:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99999000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(1000)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(90000000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(10000000)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_limit_buy_order::submit_limit_buy_order_with_long stdout ----
2025-03-10T19:12:14.380964Z TRACE submit_limit_buy_order_with_long: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.383816Z TRACE submit_limit_buy_order_with_long:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385067Z TRACE submit_limit_buy_order_with_long:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.385183Z TRACE submit_limit_buy_order_with_long: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote

thread 'tests::submit_limit_buy_order::submit_limit_buy_order_with_long' panicked at src/tests/submit_limit_buy_order.rs:224:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99991000)), position_margin: QuoteCurrency(Decimal(9000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(10000000)), position_margin: QuoteCurrency(Decimal(90000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_market_buy_order::submit_market_buy_order_turnaround_short stdout ----
2025-03-10T19:12:14.381205Z TRACE submit_market_buy_order_turnaround_short: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381273Z TRACE submit_market_buy_order_turnaround_short:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(9900000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: new position: qty 9.00000 Base @ 99.00000 Quote
2025-03-10T19:12:14.384791Z TRACE submit_market_buy_order_turnaround_short:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(9900000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09090 Quote
2025-03-10T19:12:14.385395Z TRACE submit_market_buy_order_turnaround_short: lfest::position_inner: new position: qty 9.00000 Base @ 99.00000 Quote

thread 'tests::submit_market_buy_order::submit_market_buy_order_turnaround_short' panicked at src/tests/submit_market_buy_order.rs:238:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99990910)), position_margin: QuoteCurrency(Decimal(9090)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(10900000)), position_margin: QuoteCurrency(Decimal(89100000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_market_buy_order::submit_market_buy_order_with_short_position stdout ----
2025-03-10T19:12:14.381249Z TRACE submit_market_buy_order_with_short_position: lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.384799Z TRACE submit_market_buy_order_with_short_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385443Z TRACE submit_market_buy_order_with_short_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote

thread 'tests::submit_market_buy_order::submit_market_buy_order_with_short_position' panicked at src/tests/submit_market_buy_order.rs:166:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99991000)), position_margin: QuoteCurrency(Decimal(9000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(10000000)), position_margin: QuoteCurrency(Decimal(90000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_limit_sell_order::submit_limit_sell_order_no_position stdout ----
2025-03-10T19:12:14.381457Z TRACE submit_limit_sell_order_no_position: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381479Z TRACE submit_limit_sell_order_no_position: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 9.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.381488Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.381498Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.381505Z TRACE submit_limit_sell_order_no_position: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(9000)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:12:14.381513Z DEBUG submit_limit_sell_order_no_position: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 9.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.381521Z DEBUG submit_limit_sell_order_no_position: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.381528Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(900000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.381541Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(900000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.381572Z TRACE submit_limit_sell_order_no_position: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.381581Z TRACE submit_limit_sell_order_no_position: lfest::exchange: update_state: market_update: price 101.00000 Quote, quantity: 9.00000 Base, side: Buy
2025-03-10T19:12:14.384137Z TRACE submit_limit_sell_order_no_position: lfest::exchange: filled limit Sell order 0: 9.00000 Base/9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.384148Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(900000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.384282Z TRACE submit_limit_sell_order_no_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(9000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(9000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(1))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385317Z TRACE submit_limit_sell_order_no_position:change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(9000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(9000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(1))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.385538Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: order_margin_internal: position: Short(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(1)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.385562Z TRACE submit_limit_sell_order_no_position: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_ORDER_MARGIN_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.385569Z TRACE submit_limit_sell_order_no_position: lfest::order_margin: order_margin_internal: position: Short(PositionInner { quantity: BaseCurrency(Decimal(900000)), entry_price: QuoteCurrency(Decimal(10000000)), outstanding_fees: QuoteCurrency(Decimal(1)) }), active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.385579Z TRACE submit_limit_sell_order_no_position: lfest::exchange: update_state: market_update: bid: 101.00000 Quote, ask: 102.00000 Quote
2025-03-10T19:12:14.385596Z TRACE submit_limit_sell_order_no_position: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote

thread 'tests::submit_limit_sell_order::submit_limit_sell_order_no_position' panicked at src/tests/submit_limit_sell_order.rs:64:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99991000)), position_margin: QuoteCurrency(Decimal(9000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(10000000)), position_margin: QuoteCurrency(Decimal(90000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_market_sell_order::submit_market_sell_order_reject stdout ----
2025-03-10T19:12:14.381331Z TRACE lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.384847Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(1000000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(6))}: lfest::position_inner: new position: qty 10.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385431Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(1000000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(6))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.10000 Quote

thread 'tests::submit_market_sell_order::submit_market_sell_order_reject' panicked at src/tests/submit_market_sell_order.rs:20:5:
assertion `left == right` failed
  left: Ok(MarketOrder { user_order_id: NoUserOrderId, side: Sell, quantity: BaseCurrency(Decimal(1000000)), state: Filled { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, ts_ns_executed: TimestampNs(0), avg_fill_price: QuoteCurrency(Decimal(10000000)), filled_qty: BaseCurrency(Decimal(1000000)) }, _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> })
 right: Err(RiskError(NotEnoughAvailableBalance))

---- tests::submit_market_sell_order::submit_market_sell_order_turnaround_long stdout ----
2025-03-10T19:12:14.381410Z TRACE lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.384175Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385466Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Buy transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote

thread 'tests::submit_market_sell_order::submit_market_sell_order_turnaround_long' panicked at src/tests/submit_market_sell_order.rs:196:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99991000)), position_margin: QuoteCurrency(Decimal(9000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(10000000)), position_margin: QuoteCurrency(Decimal(90000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- tests::submit_limit_buy_order::submit_limit_buy_order_no_position stdout ----
2025-03-10T19:12:14.381211Z TRACE submit_limit_buy_order_no_position: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381248Z TRACE submit_limit_buy_order_no_position: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 98.00000 Quote, state: NewOrder
2025-03-10T19:12:14.381260Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.381284Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.383773Z TRACE submit_limit_buy_order_no_position: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(5102)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:12:14.384796Z DEBUG submit_limit_buy_order_no_position: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 98.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.384809Z DEBUG submit_limit_buy_order_no_position: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.384824Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9800000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.385396Z TRACE submit_limit_buy_order_no_position: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9800000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.385576Z TRACE submit_limit_buy_order_no_position: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05102 Quote

thread 'tests::submit_limit_buy_order::submit_limit_buy_order_no_position' panicked at src/tests/submit_limit_buy_order.rs:27:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99994898)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(5102)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(51000000)), position_margin: QuoteCurrency(Decimal(0)), order_margin: QuoteCurrency(Decimal(49000000)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- position_inner::tests::position_inner_decrease_contracts_2::_5_side_buy_expects stdout ----
2025-03-10T19:12:14.380354Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.382726Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.384385Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 90.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.385353Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: TREASURY_ACCOUNT, amount: 0.00277 Quote
2025-03-10T19:12:14.385557Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.00500 Quote
2025-03-10T19:12:14.385576Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_2::_5_side_buy_expects' panicked at src/position_inner.rs:431:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- tests::submit_limit_buy_order::submit_limit_buy_order_with_short stdout ----
2025-03-10T19:12:14.380954Z TRACE lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.383993Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385079Z TRACE change_position{self=Neutral filled_qty=BaseCurrency(Decimal(900000)) fill_price=QuoteCurrency(Decimal(10000000)) side=Sell transaction_accounting=InMemoryTransactionAccounting { margin_accounts: [TAccount { debits_posted: QuoteCurrency(Decimal(100000000)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(0)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }, TAccount { debits_posted: QuoteCurrency(Decimal(0)), credits_posted: QuoteCurrency(Decimal(100000000)), _quote: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }] } init_margin_req=Decimal(100000) fees=QuoteCurrency(Decimal(5))}: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.09000 Quote
2025-03-10T19:12:14.386339Z TRACE lfest::position_inner: new position: qty 9.00000 Base @ 100.00000 Quote

thread 'tests::submit_limit_buy_order::submit_limit_buy_order_with_short' panicked at src/tests/submit_limit_buy_order.rs:320:5:
assertion `left == right` failed
  left: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(99991000)), position_margin: QuoteCurrency(Decimal(9000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }
 right: UserBalances { available_wallet_balance: QuoteCurrency(Decimal(10000000)), position_margin: QuoteCurrency(Decimal(90000000)), order_margin: QuoteCurrency(Decimal(0)), _q: PhantomData<lfest::types::smol_currency::quote_currency::QuoteCurrency<i64, 5>> }

---- position_inner::tests::position_inner_decrease_contracts_win::_1_side_buy_expects stdout ----
2025-03-10T19:12:14.380455Z TRACE lfest::position_inner: new position: qty 5.00000 Base @ 100.00000 Quote
2025-03-10T19:12:14.385382Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_POSITION_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.385599Z DEBUG lfest::position_inner: decrease_contracts: qty: 2.50000 Base @ 110.00000 Quote; self: PositionInner( quantity: 5.00000 Base, outstanding_fees: 0.00001 Quote)
2025-03-10T19:12:14.386166Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: TREASURY_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00228 Quote
2025-03-10T19:12:14.386415Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_WALLET_ACCOUNT, credit_account_id: USER_POSITION_MARGIN_ACCOUNT, amount: 0.02500 Quote
2025-03-10T19:12:14.386431Z TRACE lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: EXCHANGE_FEE_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.00001 Quote

thread 'position_inner::tests::position_inner_decrease_contracts_win::_1_side_buy_expects' panicked at src/position_inner.rs:388:9:
assertion `left == right` failed
  left: QuoteCurrency(Decimal(2500))
 right: QuoteCurrency(Decimal(25000000))

---- tests::submit_limit_buy_order::submit_limit_buy_order_no_position_max stdout ----
2025-03-10T19:12:14.381289Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: update_state: market_update: bid: 100.00000 Quote, ask: 101.00000 Quote
2025-03-10T19:12:14.381346Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.383797Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.384843Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.384854Z TRACE submit_limit_buy_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(5000)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:12:14.385420Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.385433Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.385606Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.385616Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386187Z TRACE submit_limit_buy_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.386370Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 4.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386379Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386388Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386396Z TRACE submit_limit_buy_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(5000)), new_order_margin: QuoteCurrency(Decimal(9000)), available_wallet_balance: QuoteCurrency(Decimal(99995000))
2025-03-10T19:12:14.386402Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386408Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386467Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386475Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386504Z TRACE submit_limit_buy_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.04000 Quote
2025-03-10T19:12:14.386538Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386545Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386569Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386617Z TRACE submit_limit_buy_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(9000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99991000))
2025-03-10T19:12:14.386623Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386629Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386676Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386683Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386711Z TRACE submit_limit_buy_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.386723Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 5.00000 Base @ 101.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386730Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386750Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386762Z TRACE submit_limit_buy_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(10000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99990000))
2025-03-10T19:12:14.386778Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 5.00000 Base @ 101.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386854Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386957Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386978Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386994Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 4.00000 Base @ 101.00000 Quote, state: NewOrder
2025-03-10T19:12:14.387002Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387018Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387032Z TRACE submit_limit_buy_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(10000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99990000))
2025-03-10T19:12:14.387038Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 4.00000 Base @ 101.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.387044Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 101.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.387058Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.387064Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387127Z TRACE submit_limit_buy_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 1.00000 Base @ 101.00000 Quote, state: NewOrder
2025-03-10T19:12:14.387134Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387153Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387169Z TRACE submit_limit_buy_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(10000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99990000))
2025-03-10T19:12:14.387175Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 1.00000 Base @ 101.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.387182Z DEBUG submit_limit_buy_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 101.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 101.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 100.00000 Quote, ask: 101.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.387201Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.387208Z TRACE submit_limit_buy_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }

thread 'tests::submit_limit_buy_order::submit_limit_buy_order_no_position_max' panicked at src/tests/submit_limit_buy_order.rs:187:5:
assertion `left == right` failed
  left: Ok(LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10100000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } })
 right: Err(RiskError(NotEnoughAvailableBalance))

---- tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max stdout ----
2025-03-10T19:12:14.381344Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: update_state: market_update: bid: 99.00000 Quote, ask: 100.00000 Quote
2025-03-10T19:12:14.381397Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.381417Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.384055Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [] }
2025-03-10T19:12:14.385076Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(0)), new_order_margin: QuoteCurrency(Decimal(5000)), available_wallet_balance: QuoteCurrency(Decimal(100000000))
2025-03-10T19:12:14.385456Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386154Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386207Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386217Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386395Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.05000 Quote
2025-03-10T19:12:14.386405Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386419Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386432Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386440Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(5000)), new_order_margin: QuoteCurrency(Decimal(9000)), available_wallet_balance: QuoteCurrency(Decimal(99995000))
2025-03-10T19:12:14.386475Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386529Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386540Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386547Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386597Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.04000 Quote
2025-03-10T19:12:14.386604Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386613Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386652Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386662Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(9000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99991000))
2025-03-10T19:12:14.386667Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386701Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386710Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386730Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386768Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01000 Quote
2025-03-10T19:12:14.386795Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386803Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386815Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386827Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(10000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99990000))
2025-03-10T19:12:14.386832Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.386838Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.386851Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.386858Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.386969Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 4.00000 Base @ 99.00000 Quote, state: NewOrder
2025-03-10T19:12:14.386995Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387011Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387026Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(10000)), new_order_margin: QuoteCurrency(Decimal(10000)), available_wallet_balance: QuoteCurrency(Decimal(99990000))
2025-03-10T19:12:14.387035Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 4.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.387041Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.387055Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.387062Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387101Z TRACE submit_limit_sell_order_no_position_max: lfest::exchange: submit_order: user_id: NoUserOrderId, limit Buy 2.00000 Base @ 99.00000 Quote, state: NewOrder
2025-03-10T19:12:14.387131Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387150Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387167Z TRACE submit_limit_sell_order_no_position_max: lfest::risk_engine::isolated_margin: order_margin: QuoteCurrency(Decimal(10000)), new_order_margin: QuoteCurrency(Decimal(11110)), available_wallet_balance: QuoteCurrency(Decimal(99990000))
2025-03-10T19:12:14.387173Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: append_limit_order: order: user_id: NoUserOrderId, limit Buy 2.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }, marketable: false
2025-03-10T19:12:14.387182Z DEBUG submit_limit_sell_order_no_position_max: lfest::exchange: active_limit_orders: ActiveLimitOrders:
user_id: NoUserOrderId, limit Sell 5.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 4.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Sell 1.00000 Base @ 100.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 5.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
user_id: NoUserOrderId, limit Buy 4.00000 Base @ 99.00000 Quote, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled }
, market_state: bid: 99.00000 Quote, ask: 100.00000 Quote, ts_ns: 0, step: 1, position: Neutral
2025-03-10T19:12:14.387198Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: update_order: order: LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }
2025-03-10T19:12:14.387204Z TRACE submit_limit_sell_order_no_position_max: lfest::order_margin: order_margin_internal: position: Neutral, active_limit_orders: ActiveLimitOrders { arena: [LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(0), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(1), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Sell, limit_price: QuoteCurrency(Decimal(10000000)), remaining_quantity: BaseCurrency(Decimal(100000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(2), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(500000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(3), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(400000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(4), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }, LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } }] }
2025-03-10T19:12:14.387240Z TRACE submit_limit_sell_order_no_position_max: lfest::accounting::in_memory_accounting: create_margin_transfer: debit_account_id: USER_ORDER_MARGIN_ACCOUNT, credit_account_id: USER_WALLET_ACCOUNT, amount: 0.01110 Quote

thread 'tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max' panicked at src/tests/submit_limit_sell_order.rs:172:5:
assertion `left == right` failed
  left: Ok(LimitOrder { user_order_id: NoUserOrderId, side: Buy, limit_price: QuoteCurrency(Decimal(9900000)), remaining_quantity: BaseCurrency(Decimal(200000)), re_pricing: GoodTilCrossing, state: Pending { meta: ExchangeOrderMeta { id: OrderId(5), ts_ns_exchange_received: TimestampNs(0) }, filled_quantity: Unfilled } })
 right: Err(RiskError(NotEnoughAvailableBalance))


failures:
    order_margin::tests::order_margin_no_position
    order_margin::tests::order_margin_with_long
    order_margin::tests::order_margin_with_short
    position_inner::tests::position_inner_decrease_contracts_2::_1_side_buy_expects
    position_inner::tests::position_inner_decrease_contracts_2::_1_side_sell_expects
    position_inner::tests::position_inner_decrease_contracts_2::_2_side_buy_expects
    position_inner::tests::position_inner_decrease_contracts_2::_2_side_sell_expects
    position_inner::tests::position_inner_decrease_contracts_2::_5_side_buy_expects
    position_inner::tests::position_inner_decrease_contracts_2::_5_side_sell_expects
    position_inner::tests::position_inner_decrease_contracts_basic::_1_expects
    position_inner::tests::position_inner_decrease_contracts_basic::_2_expects
    position_inner::tests::position_inner_decrease_contracts_basic::_5_expects
    position_inner::tests::position_inner_decrease_contracts_win::_1_side_buy_expects
    position_inner::tests::position_inner_decrease_contracts_win::_1_side_sell_expects
    position_inner::tests::position_inner_decrease_contracts_win::_2_side_buy_expects
    position_inner::tests::position_inner_decrease_contracts_win::_2_side_sell_expects
    position_inner::tests::position_inner_decrease_contracts_win::_5_side_buy_expects
    position_inner::tests::position_inner_decrease_contracts_win::_5_side_sell_expects
    position_inner::tests::position_inner_increase_contracts::_1_expects
    position_inner::tests::position_inner_increase_contracts::_2_expects
    position_inner::tests::position_inner_increase_contracts::_5_expects
    position_inner::tests::position_inner_new::_1_expects
    position_inner::tests::position_inner_new::_2_expects
    position_inner::tests::position_inner_new::_5_expects
    tests::cancel_limit_order::cancel_limit_order
    tests::submit_limit_buy_order::submit_limit_buy_order_no_position
    tests::submit_limit_buy_order::submit_limit_buy_order_no_position_max
    tests::submit_limit_buy_order::submit_limit_buy_order_with_long
    tests::submit_limit_buy_order::submit_limit_buy_order_with_short
    tests::submit_limit_sell_order::submit_limit_sell_order_no_position
    tests::submit_limit_sell_order::submit_limit_sell_order_no_position_max
    tests::submit_market_buy_order::submit_market_buy_order_no_position
    tests::submit_market_buy_order::submit_market_buy_order_reject
    tests::submit_market_buy_order::submit_market_buy_order_turnaround_short
    tests::submit_market_buy_order::submit_market_buy_order_with_long_position
    tests::submit_market_buy_order::submit_market_buy_order_with_short_position
    tests::submit_market_sell_order::submit_market_sell_order
    tests::submit_market_sell_order::submit_market_sell_order_reject
    tests::submit_market_sell_order::submit_market_sell_order_turnaround_long
    tests::submit_market_sell_order::submit_market_sell_order_with_long_position
    tests::submit_market_sell_order::submit_market_sell_order_with_short_position
    types::smol_currency::tests::convert_base_to_quote
    types::smol_currency::tests::quote_currency_pnl

test result: FAILED. 650 passed; 43 failed; 4 ignored; 0 measured; 0 filtered out; finished in 0.04s

error: test failed, to rerun pass `-p lfest --lib`

*** result: Failure(101)
